	ep_g3x8_avmm256_dma_control_0 u0 (
		.MsiInterface_i       (_connected_to_MsiInterface_i_),       //   input,   width = 82, MsiInterface.msi_intfc
		.RdDCMAddress_o       (_connected_to_RdDCMAddress_o_),       //  output,   width = 64, RdDCM_Master.address
		.RdDCMWrite_o         (_connected_to_RdDCMWrite_o_),         //  output,    width = 1,             .write
		.RdDCMWriteData_o     (_connected_to_RdDCMWriteData_o_),     //  output,   width = 32,             .writedata
		.RdDCMRead_o          (_connected_to_RdDCMRead_o_),          //  output,    width = 1,             .read
		.RdDCMByteEnable_o    (_connected_to_RdDCMByteEnable_o_),    //  output,    width = 4,             .byteenable
		.RdDCMWaitRequest_i   (_connected_to_RdDCMWaitRequest_i_),   //   input,    width = 1,             .waitrequest
		.RdDCMReadData_i      (_connected_to_RdDCMReadData_i_),      //   input,   width = 32,             .readdata
		.RdDCMReadDataValid_i (_connected_to_RdDCMReadDataValid_i_), //   input,    width = 1,             .readdatavalid
		.RdDCSChipSelect_i    (_connected_to_RdDCSChipSelect_i_),    //   input,    width = 1,  RdDCS_slave.chipselect
		.RdDCSWrite_i         (_connected_to_RdDCSWrite_i_),         //   input,    width = 1,             .write
		.RdDCSAddress_i       (_connected_to_RdDCSAddress_i_),       //   input,    width = 8,             .address
		.RdDCSWriteData_i     (_connected_to_RdDCSWriteData_i_),     //   input,   width = 32,             .writedata
		.RdDCSByteEnable_i    (_connected_to_RdDCSByteEnable_i_),    //   input,    width = 4,             .byteenable
		.RdDCSWaitRequest_o   (_connected_to_RdDCSWaitRequest_o_),   //  output,    width = 1,             .waitrequest
		.RdDCSRead_i          (_connected_to_RdDCSRead_i_),          //   input,    width = 1,             .read
		.RdDCSReadData_o      (_connected_to_RdDCSReadData_o_),      //  output,   width = 32,             .readdata
		.RdDmaRxData_i        (_connected_to_RdDmaRxData_i_),        //   input,   width = 32,     RdDMA_Rx.data
		.RdDmaRxValid_i       (_connected_to_RdDmaRxValid_i_),       //   input,    width = 1,             .valid
		.RdDmaTxData_o        (_connected_to_RdDmaTxData_o_),        //  output,  width = 160,     RdDMA_Tx.data
		.RdDmaTxValid_o       (_connected_to_RdDmaTxValid_o_),       //  output,    width = 1,             .valid
		.RdDmaTxReady_i       (_connected_to_RdDmaTxReady_i_),       //   input,    width = 1,             .ready
		.RdDTSChipSelect_i    (_connected_to_RdDTSChipSelect_i_),    //   input,    width = 1,  RdDTS_slave.chipselect
		.RdDTSWrite_i         (_connected_to_RdDTSWrite_i_),         //   input,    width = 1,             .write
		.RdDTSBurstCount_i    (_connected_to_RdDTSBurstCount_i_),    //   input,    width = 5,             .burstcount
		.RdDTSAddress_i       (_connected_to_RdDTSAddress_i_),       //   input,    width = 8,             .address
		.RdDTSWriteData_i     (_connected_to_RdDTSWriteData_i_),     //   input,  width = 256,             .writedata
		.RdDTSWaitRequest_o   (_connected_to_RdDTSWaitRequest_o_),   //  output,    width = 1,             .waitrequest
		.Rstn_i               (_connected_to_Rstn_i_),               //   input,    width = 1,       Resetn.reset_n
		.WrDCMAddress_o       (_connected_to_WrDCMAddress_o_),       //  output,   width = 64, WrDCM_Master.address
		.WrDCMWrite_o         (_connected_to_WrDCMWrite_o_),         //  output,    width = 1,             .write
		.WrDCMWriteData_o     (_connected_to_WrDCMWriteData_o_),     //  output,   width = 32,             .writedata
		.WrDCMRead_o          (_connected_to_WrDCMRead_o_),          //  output,    width = 1,             .read
		.WrDCMByteEnable_o    (_connected_to_WrDCMByteEnable_o_),    //  output,    width = 4,             .byteenable
		.WrDCMWaitRequest_i   (_connected_to_WrDCMWaitRequest_i_),   //   input,    width = 1,             .waitrequest
		.WrDCMReadDataValid_i (_connected_to_WrDCMReadDataValid_i_), //   input,    width = 1,             .readdatavalid
		.WrDCMReadData_i      (_connected_to_WrDCMReadData_i_),      //   input,   width = 32,             .readdata
		.WrDCSChipSelect_i    (_connected_to_WrDCSChipSelect_i_),    //   input,    width = 1,  WrDCS_slave.chipselect
		.WrDCSWrite_i         (_connected_to_WrDCSWrite_i_),         //   input,    width = 1,             .write
		.WrDCSAddress_i       (_connected_to_WrDCSAddress_i_),       //   input,    width = 8,             .address
		.WrDCSWriteData_i     (_connected_to_WrDCSWriteData_i_),     //   input,   width = 32,             .writedata
		.WrDCSByteEnable_i    (_connected_to_WrDCSByteEnable_i_),    //   input,    width = 4,             .byteenable
		.WrDCSWaitRequest_o   (_connected_to_WrDCSWaitRequest_o_),   //  output,    width = 1,             .waitrequest
		.WrDCSRead_i          (_connected_to_WrDCSRead_i_),          //   input,    width = 1,             .read
		.WrDCSReadData_o      (_connected_to_WrDCSReadData_o_),      //  output,   width = 32,             .readdata
		.WrDmaRxData_i        (_connected_to_WrDmaRxData_i_),        //   input,   width = 32,     WrDMA_Rx.data
		.WrDmaRxValid_i       (_connected_to_WrDmaRxValid_i_),       //   input,    width = 1,             .valid
		.WrDmaTxData_o        (_connected_to_WrDmaTxData_o_),        //  output,  width = 160,     WrDMA_Tx.data
		.WrDmaTxValid_o       (_connected_to_WrDmaTxValid_o_),       //  output,    width = 1,             .valid
		.WrDmaTxReady_i       (_connected_to_WrDmaTxReady_i_),       //   input,    width = 1,             .ready
		.WrDTSChipSelect_i    (_connected_to_WrDTSChipSelect_i_),    //   input,    width = 1,  WrDTS_slave.chipselect
		.WrDTSWrite_i         (_connected_to_WrDTSWrite_i_),         //   input,    width = 1,             .write
		.WrDTSBurstCount_i    (_connected_to_WrDTSBurstCount_i_),    //   input,    width = 5,             .burstcount
		.WrDTSAddress_i       (_connected_to_WrDTSAddress_i_),       //   input,    width = 8,             .address
		.WrDTSWriteData_i     (_connected_to_WrDTSWriteData_i_),     //   input,  width = 256,             .writedata
		.WrDTSWaitRequest_o   (_connected_to_WrDTSWaitRequest_o_),   //  output,    width = 1,             .waitrequest
		.Clk_i                (_connected_to_Clk_i_)                 //   input,    width = 1,        clock.clk
	);

