// ep_g3x8_avmm256_dma_control_0.v

// Generated using ACDS version 17.1.2 304

`timescale 1 ps / 1 ps
module ep_g3x8_avmm256_dma_control_0 (
		input  wire [81:0]  MsiInterface_i,       // MsiInterface.msi_intfc
		output wire [63:0]  RdDCMAddress_o,       // RdDCM_Master.address
		output wire         RdDCMWrite_o,         //             .write
		output wire [31:0]  RdDCMWriteData_o,     //             .writedata
		output wire         RdDCMRead_o,          //             .read
		output wire [3:0]   RdDCMByteEnable_o,    //             .byteenable
		input  wire         RdDCMWaitRequest_i,   //             .waitrequest
		input  wire [31:0]  RdDCMReadData_i,      //             .readdata
		input  wire         RdDCMReadDataValid_i, //             .readdatavalid
		input  wire         RdDCSChipSelect_i,    //  RdDCS_slave.chipselect
		input  wire         RdDCSWrite_i,         //             .write
		input  wire [7:0]   RdDCSAddress_i,       //             .address
		input  wire [31:0]  RdDCSWriteData_i,     //             .writedata
		input  wire [3:0]   RdDCSByteEnable_i,    //             .byteenable
		output wire         RdDCSWaitRequest_o,   //             .waitrequest
		input  wire         RdDCSRead_i,          //             .read
		output wire [31:0]  RdDCSReadData_o,      //             .readdata
		input  wire [31:0]  RdDmaRxData_i,        //     RdDMA_Rx.data
		input  wire         RdDmaRxValid_i,       //             .valid
		output wire [159:0] RdDmaTxData_o,        //     RdDMA_Tx.data
		output wire         RdDmaTxValid_o,       //             .valid
		input  wire         RdDmaTxReady_i,       //             .ready
		input  wire         RdDTSChipSelect_i,    //  RdDTS_slave.chipselect
		input  wire         RdDTSWrite_i,         //             .write
		input  wire [4:0]   RdDTSBurstCount_i,    //             .burstcount
		input  wire [7:0]   RdDTSAddress_i,       //             .address
		input  wire [255:0] RdDTSWriteData_i,     //             .writedata
		output wire         RdDTSWaitRequest_o,   //             .waitrequest
		input  wire         Rstn_i,               //       Resetn.reset_n
		output wire [63:0]  WrDCMAddress_o,       // WrDCM_Master.address
		output wire         WrDCMWrite_o,         //             .write
		output wire [31:0]  WrDCMWriteData_o,     //             .writedata
		output wire         WrDCMRead_o,          //             .read
		output wire [3:0]   WrDCMByteEnable_o,    //             .byteenable
		input  wire         WrDCMWaitRequest_i,   //             .waitrequest
		input  wire         WrDCMReadDataValid_i, //             .readdatavalid
		input  wire [31:0]  WrDCMReadData_i,      //             .readdata
		input  wire         WrDCSChipSelect_i,    //  WrDCS_slave.chipselect
		input  wire         WrDCSWrite_i,         //             .write
		input  wire [7:0]   WrDCSAddress_i,       //             .address
		input  wire [31:0]  WrDCSWriteData_i,     //             .writedata
		input  wire [3:0]   WrDCSByteEnable_i,    //             .byteenable
		output wire         WrDCSWaitRequest_o,   //             .waitrequest
		input  wire         WrDCSRead_i,          //             .read
		output wire [31:0]  WrDCSReadData_o,      //             .readdata
		input  wire [31:0]  WrDmaRxData_i,        //     WrDMA_Rx.data
		input  wire         WrDmaRxValid_i,       //             .valid
		output wire [159:0] WrDmaTxData_o,        //     WrDMA_Tx.data
		output wire         WrDmaTxValid_o,       //             .valid
		input  wire         WrDmaTxReady_i,       //             .ready
		input  wire         WrDTSChipSelect_i,    //  WrDTS_slave.chipselect
		input  wire         WrDTSWrite_i,         //             .write
		input  wire [4:0]   WrDTSBurstCount_i,    //             .burstcount
		input  wire [7:0]   WrDTSAddress_i,       //             .address
		input  wire [255:0] WrDTSWriteData_i,     //             .writedata
		output wire         WrDTSWaitRequest_o,   //             .waitrequest
		input  wire         Clk_i                 //        clock.clk
	);

	dma_control #(
		.DMA_WIDTH (256)
	) dma_control_0 (
		.Clk_i                (Clk_i),                //   input,    width = 1,        clock.clk
		.Rstn_i               (Rstn_i),               //   input,    width = 1,       Resetn.reset_n
		.RdDCSChipSelect_i    (RdDCSChipSelect_i),    //   input,    width = 1,  RdDCS_slave.chipselect
		.RdDCSWrite_i         (RdDCSWrite_i),         //   input,    width = 1,             .write
		.RdDCSAddress_i       (RdDCSAddress_i),       //   input,    width = 8,             .address
		.RdDCSWriteData_i     (RdDCSWriteData_i),     //   input,   width = 32,             .writedata
		.RdDCSByteEnable_i    (RdDCSByteEnable_i),    //   input,    width = 4,             .byteenable
		.RdDCSWaitRequest_o   (RdDCSWaitRequest_o),   //  output,    width = 1,             .waitrequest
		.RdDCSRead_i          (RdDCSRead_i),          //   input,    width = 1,             .read
		.RdDCSReadData_o      (RdDCSReadData_o),      //  output,   width = 32,             .readdata
		.RdDTSChipSelect_i    (RdDTSChipSelect_i),    //   input,    width = 1,  RdDTS_slave.chipselect
		.RdDTSWrite_i         (RdDTSWrite_i),         //   input,    width = 1,             .write
		.RdDTSBurstCount_i    (RdDTSBurstCount_i),    //   input,    width = 5,             .burstcount
		.RdDTSAddress_i       (RdDTSAddress_i),       //   input,    width = 8,             .address
		.RdDTSWriteData_i     (RdDTSWriteData_i),     //   input,  width = 256,             .writedata
		.RdDTSWaitRequest_o   (RdDTSWaitRequest_o),   //  output,    width = 1,             .waitrequest
		.RdDmaTxData_o        (RdDmaTxData_o),        //  output,  width = 160,     RdDMA_Tx.data
		.RdDmaTxValid_o       (RdDmaTxValid_o),       //  output,    width = 1,             .valid
		.RdDmaTxReady_i       (RdDmaTxReady_i),       //   input,    width = 1,             .ready
		.RdDmaRxData_i        (RdDmaRxData_i),        //   input,   width = 32,     RdDMA_Rx.data
		.RdDmaRxValid_i       (RdDmaRxValid_i),       //   input,    width = 1,             .valid
		.RdDCMAddress_o       (RdDCMAddress_o),       //  output,   width = 64, RdDCM_Master.address
		.RdDCMWrite_o         (RdDCMWrite_o),         //  output,    width = 1,             .write
		.RdDCMWriteData_o     (RdDCMWriteData_o),     //  output,   width = 32,             .writedata
		.RdDCMRead_o          (RdDCMRead_o),          //  output,    width = 1,             .read
		.RdDCMByteEnable_o    (RdDCMByteEnable_o),    //  output,    width = 4,             .byteenable
		.RdDCMWaitRequest_i   (RdDCMWaitRequest_i),   //   input,    width = 1,             .waitrequest
		.RdDCMReadData_i      (RdDCMReadData_i),      //   input,   width = 32,             .readdata
		.RdDCMReadDataValid_i (RdDCMReadDataValid_i), //   input,    width = 1,             .readdatavalid
		.WrDCSChipSelect_i    (WrDCSChipSelect_i),    //   input,    width = 1,  WrDCS_slave.chipselect
		.WrDCSWrite_i         (WrDCSWrite_i),         //   input,    width = 1,             .write
		.WrDCSAddress_i       (WrDCSAddress_i),       //   input,    width = 8,             .address
		.WrDCSWriteData_i     (WrDCSWriteData_i),     //   input,   width = 32,             .writedata
		.WrDCSByteEnable_i    (WrDCSByteEnable_i),    //   input,    width = 4,             .byteenable
		.WrDCSWaitRequest_o   (WrDCSWaitRequest_o),   //  output,    width = 1,             .waitrequest
		.WrDCSRead_i          (WrDCSRead_i),          //   input,    width = 1,             .read
		.WrDCSReadData_o      (WrDCSReadData_o),      //  output,   width = 32,             .readdata
		.WrDTSChipSelect_i    (WrDTSChipSelect_i),    //   input,    width = 1,  WrDTS_slave.chipselect
		.WrDTSWrite_i         (WrDTSWrite_i),         //   input,    width = 1,             .write
		.WrDTSBurstCount_i    (WrDTSBurstCount_i),    //   input,    width = 5,             .burstcount
		.WrDTSAddress_i       (WrDTSAddress_i),       //   input,    width = 8,             .address
		.WrDTSWriteData_i     (WrDTSWriteData_i),     //   input,  width = 256,             .writedata
		.WrDTSWaitRequest_o   (WrDTSWaitRequest_o),   //  output,    width = 1,             .waitrequest
		.WrDmaTxData_o        (WrDmaTxData_o),        //  output,  width = 160,     WrDMA_Tx.data
		.WrDmaTxValid_o       (WrDmaTxValid_o),       //  output,    width = 1,             .valid
		.WrDmaTxReady_i       (WrDmaTxReady_i),       //   input,    width = 1,             .ready
		.WrDmaRxData_i        (WrDmaRxData_i),        //   input,   width = 32,     WrDMA_Rx.data
		.WrDmaRxValid_i       (WrDmaRxValid_i),       //   input,    width = 1,             .valid
		.WrDCMAddress_o       (WrDCMAddress_o),       //  output,   width = 64, WrDCM_Master.address
		.WrDCMWrite_o         (WrDCMWrite_o),         //  output,    width = 1,             .write
		.WrDCMWriteData_o     (WrDCMWriteData_o),     //  output,   width = 32,             .writedata
		.WrDCMRead_o          (WrDCMRead_o),          //  output,    width = 1,             .read
		.WrDCMByteEnable_o    (WrDCMByteEnable_o),    //  output,    width = 4,             .byteenable
		.WrDCMWaitRequest_i   (WrDCMWaitRequest_i),   //   input,    width = 1,             .waitrequest
		.WrDCMReadDataValid_i (WrDCMReadDataValid_i), //   input,    width = 1,             .readdatavalid
		.WrDCMReadData_i      (WrDCMReadData_i),      //   input,   width = 32,             .readdata
		.MsiInterface_i       (MsiInterface_i)        //   input,   width = 82, MsiInterface.msi_intfc
	);

endmodule
