// XG_inst_avalon_st_tx_bfm_ip.v

// Generated using ACDS version 17.1.2 304

`timescale 1 ps / 1 ps
module XG_inst_avalon_st_tx_bfm_ip #(
		parameter USE_PACKET       = 1,
		parameter USE_CHANNEL      = 0,
		parameter USE_ERROR        = 1,
		parameter USE_READY        = 1,
		parameter USE_VALID        = 1,
		parameter USE_EMPTY        = 1,
		parameter ST_SYMBOL_W      = 8,
		parameter ST_NUMSYMBOLS    = 8,
		parameter ST_CHANNEL_W     = 1,
		parameter ST_ERROR_W       = 1,
		parameter ST_EMPTY_W       = 3,
		parameter ST_READY_LATENCY = 0,
		parameter ST_BEATSPERCYCLE = 1,
		parameter ST_MAX_CHANNELS  = 0,
		parameter VHDL_ID          = 1
	) (
		input  wire        clk,               //       clk.clk
		input  wire        reset,             // clk_reset.reset
		output wire [63:0] src_data,          //       src.data
		output wire [0:0]  src_valid,         //          .valid
		input  wire        src_ready,         //          .ready
		output wire [0:0]  src_startofpacket, //          .startofpacket
		output wire [0:0]  src_endofpacket,   //          .endofpacket
		output wire [2:0]  src_empty,         //          .empty
		output wire [0:0]  src_error          //          .error
	);

	altera_avalon_st_source_bfm #(
		.USE_PACKET       (USE_PACKET),
		.USE_CHANNEL      (USE_CHANNEL),
		.USE_ERROR        (USE_ERROR),
		.USE_READY        (USE_READY),
		.USE_VALID        (USE_VALID),
		.USE_EMPTY        (USE_EMPTY),
		.ST_SYMBOL_W      (ST_SYMBOL_W),
		.ST_NUMSYMBOLS    (ST_NUMSYMBOLS),
		.ST_CHANNEL_W     (ST_CHANNEL_W),
		.ST_ERROR_W       (ST_ERROR_W),
		.ST_EMPTY_W       (ST_EMPTY_W),
		.ST_READY_LATENCY (ST_READY_LATENCY),
		.ST_BEATSPERCYCLE (ST_BEATSPERCYCLE),
		.ST_MAX_CHANNELS  (ST_MAX_CHANNELS),
		.VHDL_ID          (VHDL_ID)
	) xg_inst_avalon_st_tx_bfm (
		.clk               (clk),               //   input,   width = 1,       clk.clk
		.reset             (reset),             //   input,   width = 1, clk_reset.reset
		.src_data          (src_data),          //  output,  width = 64,       src.data
		.src_valid         (src_valid),         //  output,   width = 1,          .valid
		.src_ready         (src_ready),         //   input,   width = 1,          .ready
		.src_startofpacket (src_startofpacket), //  output,   width = 1,          .startofpacket
		.src_endofpacket   (src_endofpacket),   //  output,   width = 1,          .endofpacket
		.src_empty         (src_empty),         //  output,   width = 3,          .empty
		.src_error         (src_error),         //  output,   width = 1,          .error
		.src_channel       ()                   // (terminated),                        
	);

endmodule
