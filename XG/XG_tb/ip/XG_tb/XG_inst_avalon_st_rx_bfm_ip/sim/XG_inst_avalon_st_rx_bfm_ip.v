// XG_inst_avalon_st_rx_bfm_ip.v

// Generated using ACDS version 17.1.2 304

`timescale 1 ps / 1 ps
module XG_inst_avalon_st_rx_bfm_ip #(
		parameter USE_PACKET       = 1,
		parameter USE_CHANNEL      = 0,
		parameter USE_ERROR        = 1,
		parameter USE_READY        = 1,
		parameter USE_VALID        = 1,
		parameter USE_EMPTY        = 1,
		parameter ST_SYMBOL_W      = 8,
		parameter ST_NUMSYMBOLS    = 8,
		parameter ST_CHANNEL_W     = 1,
		parameter ST_ERROR_W       = 6,
		parameter ST_EMPTY_W       = 3,
		parameter ST_READY_LATENCY = 0,
		parameter ST_BEATSPERCYCLE = 1,
		parameter ST_MAX_CHANNELS  = 0,
		parameter VHDL_ID          = 0
	) (
		input  wire        clk,                //       clk.clk
		input  wire        reset,              // clk_reset.reset
		input  wire [63:0] sink_data,          //      sink.data
		input  wire [0:0]  sink_valid,         //          .valid
		output wire        sink_ready,         //          .ready
		input  wire [0:0]  sink_startofpacket, //          .startofpacket
		input  wire [0:0]  sink_endofpacket,   //          .endofpacket
		input  wire [2:0]  sink_empty,         //          .empty
		input  wire [5:0]  sink_error          //          .error
	);

	altera_avalon_st_sink_bfm #(
		.USE_PACKET       (USE_PACKET),
		.USE_CHANNEL      (USE_CHANNEL),
		.USE_ERROR        (USE_ERROR),
		.USE_READY        (USE_READY),
		.USE_VALID        (USE_VALID),
		.USE_EMPTY        (USE_EMPTY),
		.ST_SYMBOL_W      (ST_SYMBOL_W),
		.ST_NUMSYMBOLS    (ST_NUMSYMBOLS),
		.ST_CHANNEL_W     (ST_CHANNEL_W),
		.ST_ERROR_W       (ST_ERROR_W),
		.ST_EMPTY_W       (ST_EMPTY_W),
		.ST_READY_LATENCY (ST_READY_LATENCY),
		.ST_BEATSPERCYCLE (ST_BEATSPERCYCLE),
		.ST_MAX_CHANNELS  (ST_MAX_CHANNELS),
		.VHDL_ID          (VHDL_ID)
	) xg_inst_avalon_st_rx_bfm (
		.clk                (clk),                //   input,   width = 1,       clk.clk
		.reset              (reset),              //   input,   width = 1, clk_reset.reset
		.sink_data          (sink_data),          //   input,  width = 64,      sink.data
		.sink_valid         (sink_valid),         //   input,   width = 1,          .valid
		.sink_ready         (sink_ready),         //  output,   width = 1,          .ready
		.sink_startofpacket (sink_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (sink_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink_empty         (sink_empty),         //   input,   width = 3,          .empty
		.sink_error         (sink_error),         //   input,   width = 6,          .error
		.sink_channel       (1'b0)                // (terminated),                        
	);

endmodule
