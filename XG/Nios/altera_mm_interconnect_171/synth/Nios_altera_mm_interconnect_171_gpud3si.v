// Nios_altera_mm_interconnect_171_gpud3si.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1.2 304

`timescale 1 ps / 1 ps
module Nios_altera_mm_interconnect_171_gpud3si (
		input  wire        clock_in_out_clk_clk,                           //                         clock_in_out_clk.clk
		input  wire [20:0] nios2_gen2_0_data_master_address,               //                 nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,           //                                         .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,            //                                         .byteenable
		input  wire        nios2_gen2_0_data_master_read,                  //                                         .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,              //                                         .readdata
		output wire        nios2_gen2_0_data_master_readdatavalid,         //                                         .readdatavalid
		input  wire        nios2_gen2_0_data_master_write,                 //                                         .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,             //                                         .writedata
		input  wire        nios2_gen2_0_data_master_debugaccess,           //                                         .debugaccess
		output wire [8:0]  nios2_gen2_0_debug_mem_slave_address,           //             nios2_gen2_0_debug_mem_slave.address
		output wire        nios2_gen2_0_debug_mem_slave_write,             //                                         .write
		output wire        nios2_gen2_0_debug_mem_slave_read,              //                                         .read
		input  wire [31:0] nios2_gen2_0_debug_mem_slave_readdata,          //                                         .readdata
		output wire [31:0] nios2_gen2_0_debug_mem_slave_writedata,         //                                         .writedata
		output wire [3:0]  nios2_gen2_0_debug_mem_slave_byteenable,        //                                         .byteenable
		input  wire        nios2_gen2_0_debug_mem_slave_waitrequest,       //                                         .waitrequest
		output wire        nios2_gen2_0_debug_mem_slave_debugaccess,       //                                         .debugaccess
		input  wire [20:0] nios2_gen2_0_instruction_master_address,        //          nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,    //                                         .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,           //                                         .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,       //                                         .readdata
		output wire        nios2_gen2_0_instruction_master_readdatavalid,  //                                         .readdatavalid
		input  wire        nios2_gen2_0_reset_reset_bridge_in_reset_reset, // nios2_gen2_0_reset_reset_bridge_in_reset.reset
		output wire [16:0] onchip_memory2_0_s1_address,                    //                      onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                      //                                         .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                   //                                         .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                  //                                         .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                 //                                         .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                 //                                         .chipselect
		output wire        onchip_memory2_0_s1_clken                       //                                         .clken
	);

	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire  [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire  [20:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire   [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire  [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire   [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire  [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire  [20:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire   [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire  [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire   [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire  [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire  [20:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire   [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire  [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire   [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire         nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [93:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire         nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire         nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [93:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire         nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [92:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                  // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [1:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire         onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire         onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire  [20:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire   [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire         onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire         onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire         onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire  [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire         onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire   [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire         onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [93:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire         onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire         onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [93:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [92:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                              // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [1:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire         nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [92:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire         nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire         nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [92:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire         nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire         nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_002:sink_valid
	wire  [92:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_002:sink_data
	wire         nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_002:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire         nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [92:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire   [1:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_003:sink_valid
	wire  [92:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_003:sink_data
	wire         onchip_memory2_0_s1_agent_rp_ready;                                                 // router_003:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire         onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [92:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [1:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_src_valid;                                                                   // router:src_valid -> nios2_gen2_0_data_master_limiter:cmd_sink_valid
	wire  [92:0] router_src_data;                                                                    // router:src_data -> nios2_gen2_0_data_master_limiter:cmd_sink_data
	wire         router_src_ready;                                                                   // nios2_gen2_0_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [1:0] router_src_channel;                                                                 // router:src_channel -> nios2_gen2_0_data_master_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                           // router:src_startofpacket -> nios2_gen2_0_data_master_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                             // router:src_endofpacket -> nios2_gen2_0_data_master_limiter:cmd_sink_endofpacket
	wire  [92:0] nios2_gen2_0_data_master_limiter_cmd_src_data;                                      // nios2_gen2_0_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         nios2_gen2_0_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> nios2_gen2_0_data_master_limiter:cmd_src_ready
	wire   [1:0] nios2_gen2_0_data_master_limiter_cmd_src_channel;                                   // nios2_gen2_0_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         nios2_gen2_0_data_master_limiter_cmd_src_startofpacket;                             // nios2_gen2_0_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         nios2_gen2_0_data_master_limiter_cmd_src_endofpacket;                               // nios2_gen2_0_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_limiter:rsp_sink_valid
	wire  [92:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [1:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_limiter:rsp_sink_endofpacket
	wire         nios2_gen2_0_data_master_limiter_rsp_src_valid;                                     // nios2_gen2_0_data_master_limiter:rsp_src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [92:0] nios2_gen2_0_data_master_limiter_rsp_src_data;                                      // nios2_gen2_0_data_master_limiter:rsp_src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire         nios2_gen2_0_data_master_limiter_rsp_src_ready;                                     // nios2_gen2_0_data_master_agent:rp_ready -> nios2_gen2_0_data_master_limiter:rsp_src_ready
	wire   [1:0] nios2_gen2_0_data_master_limiter_rsp_src_channel;                                   // nios2_gen2_0_data_master_limiter:rsp_src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire         nios2_gen2_0_data_master_limiter_rsp_src_startofpacket;                             // nios2_gen2_0_data_master_limiter:rsp_src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire         nios2_gen2_0_data_master_limiter_rsp_src_endofpacket;                               // nios2_gen2_0_data_master_limiter:rsp_src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire         router_001_src_valid;                                                               // router_001:src_valid -> nios2_gen2_0_instruction_master_limiter:cmd_sink_valid
	wire  [92:0] router_001_src_data;                                                                // router_001:src_data -> nios2_gen2_0_instruction_master_limiter:cmd_sink_data
	wire         router_001_src_ready;                                                               // nios2_gen2_0_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [1:0] router_001_src_channel;                                                             // router_001:src_channel -> nios2_gen2_0_instruction_master_limiter:cmd_sink_channel
	wire         router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_startofpacket
	wire         router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_endofpacket
	wire  [92:0] nios2_gen2_0_instruction_master_limiter_cmd_src_data;                               // nios2_gen2_0_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire         nios2_gen2_0_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> nios2_gen2_0_instruction_master_limiter:cmd_src_ready
	wire   [1:0] nios2_gen2_0_instruction_master_limiter_cmd_src_channel;                            // nios2_gen2_0_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire         nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_limiter:rsp_sink_valid
	wire  [92:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_limiter:rsp_sink_data
	wire         rsp_mux_001_src_ready;                                                              // nios2_gen2_0_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [1:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_limiter:rsp_sink_channel
	wire         rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_endofpacket
	wire         nios2_gen2_0_instruction_master_limiter_rsp_src_valid;                              // nios2_gen2_0_instruction_master_limiter:rsp_src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [92:0] nios2_gen2_0_instruction_master_limiter_rsp_src_data;                               // nios2_gen2_0_instruction_master_limiter:rsp_src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire         nios2_gen2_0_instruction_master_limiter_rsp_src_ready;                              // nios2_gen2_0_instruction_master_agent:rp_ready -> nios2_gen2_0_instruction_master_limiter:rsp_src_ready
	wire   [1:0] nios2_gen2_0_instruction_master_limiter_rsp_src_channel;                            // nios2_gen2_0_instruction_master_limiter:rsp_src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire         nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire         nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [92:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [1:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [92:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [1:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [92:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire         cmd_demux_001_src0_ready;                                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [1:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [92:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire         cmd_demux_001_src1_ready;                                                           // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [1:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [92:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [1:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [92:0] rsp_demux_src1_data;                                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_src1_ready;                                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [1:0] rsp_demux_src1_channel;                                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_startofpacket;                                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_src1_endofpacket;                                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [92:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [1:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [92:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_001_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [1:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire   [1:0] nios2_gen2_0_data_master_limiter_cmd_valid_data;                                    // nios2_gen2_0_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [1:0] nios2_gen2_0_instruction_master_limiter_cmd_valid_data;                             // nios2_gen2_0_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire         nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                      // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_001:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (21),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clock_in_out_clk_clk),                                                        //   input,   width = 1,                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //   input,   width = 1,                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //  output,  width = 21, avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //   input,  width = 21,      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (nios2_gen2_0_data_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (nios2_gen2_0_data_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_burstcount          (1'b1),                                                                        // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                        // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                        // (terminated),                                        
		.av_chipselect          (1'b0),                                                                        // (terminated),                                        
		.av_lock                (1'b0),                                                                        // (terminated),                                        
		.uav_clken              (),                                                                            // (terminated),                                        
		.av_clken               (1'b1),                                                                        // (terminated),                                        
		.uav_response           (2'b00),                                                                       // (terminated),                                        
		.av_response            (),                                                                            // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                        // (terminated),                                        
		.av_writeresponsevalid  ()                                                                             // (terminated),                                        
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (21),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clock_in_out_clk_clk),                                                               //   input,   width = 1,                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //   input,   width = 1,                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //  output,  width = 21, avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //   input,  width = 21,      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (nios2_gen2_0_instruction_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_burstcount          (1'b1),                                                                               // (terminated),                                        
		.av_byteenable          (4'b1111),                                                                            // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                               // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                               // (terminated),                                        
		.av_chipselect          (1'b0),                                                                               // (terminated),                                        
		.av_write               (1'b0),                                                                               // (terminated),                                        
		.av_writedata           (32'b00000000000000000000000000000000),                                               // (terminated),                                        
		.av_lock                (1'b0),                                                                               // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                               // (terminated),                                        
		.uav_clken              (),                                                                                   // (terminated),                                        
		.av_clken               (1'b1),                                                                               // (terminated),                                        
		.uav_response           (2'b00),                                                                              // (terminated),                                        
		.av_response            (),                                                                                   // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                               // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                    // (terminated),                                        
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (clock_in_out_clk_clk),                                //   input,   width = 1,                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       //   input,  width = 21, avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //  output,   width = 4,                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                    // (terminated),                                       
		.av_burstcount          (),                                                    // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                    // (terminated),                                       
		.av_lock                (),                                                    // (terminated),                                       
		.av_chipselect          (),                                                    // (terminated),                                       
		.av_clken               (),                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                // (terminated),                                       
		.av_outputenable        (),                                                    // (terminated),                                       
		.uav_response           (),                                                    // (terminated),                                       
		.av_response            (2'b00),                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                 // (terminated),                                       
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clock_in_out_clk_clk),                           //   input,   width = 1,                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),           //   input,  width = 21, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),        //   input,   width = 3,                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),              //   input,   width = 1,                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),             //   input,   width = 1,                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),       //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),     //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),        //   input,   width = 4,                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),          //  output,  width = 32,                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),         //   input,  width = 32,                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),              //   input,   width = 1,                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),       //   input,   width = 1,                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                    //  output,  width = 17,      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                      //  output,   width = 1,                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                   //   input,  width = 32,                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                  //  output,  width = 32,                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                 //  output,   width = 4,                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                 //  output,   width = 1,                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                      //  output,   width = 1,                         .clken
		.av_read                (),                                               // (terminated),                                       
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_CACHE_H               (87),
		.PKT_CACHE_L               (84),
		.PKT_THREAD_ID_H           (80),
		.PKT_THREAD_ID_L           (80),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (79),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clock_in_out_clk_clk),                                                        //   input,   width = 1,       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //   input,   width = 1, clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //   input,  width = 21,        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //  output,  width = 93,          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (nios2_gen2_0_data_master_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (nios2_gen2_0_data_master_limiter_rsp_src_data),                               //   input,  width = 93,          .data
		.rp_channel            (nios2_gen2_0_data_master_limiter_rsp_src_channel),                            //   input,   width = 2,          .channel
		.rp_startofpacket      (nios2_gen2_0_data_master_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (nios2_gen2_0_data_master_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (nios2_gen2_0_data_master_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                            // (terminated),                        
		.av_writeresponsevalid ()                                                                             // (terminated),                        
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_CACHE_H               (87),
		.PKT_CACHE_L               (84),
		.PKT_THREAD_ID_H           (80),
		.PKT_THREAD_ID_L           (80),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (79),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clock_in_out_clk_clk),                                                               //   input,   width = 1,       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //   input,   width = 1, clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //   input,  width = 21,        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //  output,  width = 93,          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (nios2_gen2_0_instruction_master_limiter_rsp_src_data),                               //   input,  width = 93,          .data
		.rp_channel            (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),                            //   input,   width = 2,          .channel
		.rp_startofpacket      (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                                   // (terminated),                        
		.av_writeresponsevalid ()                                                                                    // (terminated),                        
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                          //   input,   width = 1,             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //  output,  width = 21,              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //  output,  width = 93,                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                             //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                             //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                              //   input,  width = 93,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                     //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                       //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                           //   input,   width = 2,                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //   input,  width = 94,                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //  output,  width = 94,                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                 //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                 //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                  //   input,  width = 34,                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                 //   input,   width = 1,                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                         // (terminated),                              
		.m0_writeresponsevalid   (1'b0)                                                           // (terminated),                              
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //   input,  width = 94,        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //  output,  width = 94,       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated),                        
		.csr_read          (1'b0),                                                          // (terminated),                        
		.csr_write         (1'b0),                                                          // (terminated),                        
		.csr_readdata      (),                                                              // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated),                        
		.almost_full_data  (),                                                              // (terminated),                        
		.almost_empty_data (),                                                              // (terminated),                        
		.in_empty          (1'b0),                                                          // (terminated),                        
		.out_empty         (),                                                              // (terminated),                        
		.in_error          (1'b0),                                                          // (terminated),                        
		.out_error         (),                                                              // (terminated),                        
		.in_channel        (1'b0),                                                          // (terminated),                        
		.out_channel       ()                                                               // (terminated),                        
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                 //   input,   width = 1,             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //  output,  width = 21,              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //  output,  width = 93,                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                 //   input,  width = 93,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                        //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                          //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                              //   input,   width = 2,                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //   input,  width = 94,                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //  output,  width = 94,                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                    //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                    //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                     //   input,  width = 34,                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                    //   input,   width = 1,                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                // (terminated),                              
		.m0_writeresponsevalid   (1'b0)                                                  // (terminated),                              
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //   input,  width = 94,        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //  output,  width = 94,       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                        
		.csr_read          (1'b0),                                                 // (terminated),                        
		.csr_write         (1'b0),                                                 // (terminated),                        
		.csr_readdata      (),                                                     // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                        
		.almost_full_data  (),                                                     // (terminated),                        
		.almost_empty_data (),                                                     // (terminated),                        
		.in_empty          (1'b0),                                                 // (terminated),                        
		.out_empty         (),                                                     // (terminated),                        
		.in_error          (1'b0),                                                 // (terminated),                        
		.out_error         (),                                                     // (terminated),                        
		.in_channel        (1'b0),                                                 // (terminated),                        
		.out_channel       ()                                                      // (terminated),                        
	);

	Nios_altera_merlin_router_171_bvdyedq router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //   input,   width = 1,          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //   input,  width = 93,          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                                //  output,   width = 1,          .valid
		.src_data           (router_src_data),                                 //  output,  width = 93,          .data
		.src_channel        (router_src_channel),                              //  output,   width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                        //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //  output,   width = 1,          .endofpacket
	);

	Nios_altera_merlin_router_171_bvdyedq router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //   input,   width = 1,          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //   input,  width = 93,          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                   //   input,   width = 1,       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                   //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                                    //  output,  width = 93,          .data
		.src_channel        (router_001_src_channel),                                 //  output,   width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //  output,   width = 1,          .endofpacket
	);

	Nios_altera_merlin_router_171_exfq7ma router_002 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //   input,  width = 93,          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                //   input,   width = 1,       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                                 //  output,  width = 93,          .data
		.src_channel        (router_002_src_channel),                              //  output,   width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //  output,   width = 1,          .endofpacket
	);

	Nios_altera_merlin_router_171_exfq7ma router_003 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),             //  output,   width = 1,      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),             //   input,   width = 1,          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),              //   input,  width = 93,          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),     //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),       //   input,   width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                           //   input,   width = 1,       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                           //   input,   width = 1,       src.ready
		.src_valid          (router_003_src_valid),                           //  output,   width = 1,          .valid
		.src_data           (router_003_src_data),                            //  output,  width = 93,          .data
		.src_channel        (router_003_src_channel),                         //  output,   width = 2,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //  output,   width = 1,          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (79),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (78),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_0_data_master_limiter (
		.clk                    (clock_in_out_clk_clk),                                   //   input,   width = 1,       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //   input,   width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                        //   input,  width = 93,          .data
		.cmd_sink_channel       (router_src_channel),                                     //   input,   width = 2,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (nios2_gen2_0_data_master_limiter_cmd_src_ready),         //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (nios2_gen2_0_data_master_limiter_cmd_src_data),          //  output,  width = 93,          .data
		.cmd_src_channel        (nios2_gen2_0_data_master_limiter_cmd_src_channel),       //  output,   width = 2,          .channel
		.cmd_src_startofpacket  (nios2_gen2_0_data_master_limiter_cmd_src_startofpacket), //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_0_data_master_limiter_cmd_src_endofpacket),   //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //   input,   width = 2,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //   input,  width = 93,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (nios2_gen2_0_data_master_limiter_rsp_src_ready),         //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_0_data_master_limiter_rsp_src_valid),         //  output,   width = 1,          .valid
		.rsp_src_data           (nios2_gen2_0_data_master_limiter_rsp_src_data),          //  output,  width = 93,          .data
		.rsp_src_channel        (nios2_gen2_0_data_master_limiter_rsp_src_channel),       //  output,   width = 2,          .channel
		.rsp_src_startofpacket  (nios2_gen2_0_data_master_limiter_rsp_src_startofpacket), //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_0_data_master_limiter_rsp_src_endofpacket),   //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (nios2_gen2_0_data_master_limiter_cmd_valid_data)         //  output,   width = 2, cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (79),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (78),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_0_instruction_master_limiter (
		.clk                    (clock_in_out_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                          //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                          //   input,   width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                           //   input,  width = 93,          .data
		.cmd_sink_channel       (router_001_src_channel),                                        //   input,   width = 2,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                  //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                    //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //  output,  width = 93,          .data
		.cmd_src_channel        (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //  output,   width = 2,          .channel
		.cmd_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                         //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                         //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                       //   input,   width = 2,          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                          //   input,  width = 93,          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                 //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                   //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),         //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),         //  output,   width = 1,          .valid
		.rsp_src_data           (nios2_gen2_0_instruction_master_limiter_rsp_src_data),          //  output,  width = 93,          .data
		.rsp_src_channel        (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),       //  output,   width = 2,          .channel
		.rsp_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket), //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),   //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (nios2_gen2_0_instruction_master_limiter_cmd_valid_data)         //  output,   width = 2, cmd_valid.data
	);

	Nios_altera_merlin_demultiplexer_171_3ssvi5a cmd_demux (
		.clk                (clock_in_out_clk_clk),                                   //   input,   width = 1,        clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //   input,   width = 1,  clk_reset.reset
		.sink_ready         (nios2_gen2_0_data_master_limiter_cmd_src_ready),         //  output,   width = 1,       sink.ready
		.sink_channel       (nios2_gen2_0_data_master_limiter_cmd_src_channel),       //   input,   width = 2,           .channel
		.sink_data          (nios2_gen2_0_data_master_limiter_cmd_src_data),          //   input,  width = 93,           .data
		.sink_startofpacket (nios2_gen2_0_data_master_limiter_cmd_src_startofpacket), //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_limiter_cmd_src_endofpacket),   //   input,   width = 1,           .endofpacket
		.sink_valid         (nios2_gen2_0_data_master_limiter_cmd_valid_data),        //   input,   width = 2, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                   //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                   //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                    //  output,  width = 93,           .data
		.src0_channel       (cmd_demux_src0_channel),                                 //  output,   width = 2,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                           //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                             //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                   //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                   //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                    //  output,  width = 93,           .data
		.src1_channel       (cmd_demux_src1_channel),                                 //  output,   width = 2,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                           //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                              //  output,   width = 1,           .endofpacket
	);

	Nios_altera_merlin_demultiplexer_171_3ssvi5a cmd_demux_001 (
		.clk                (clock_in_out_clk_clk),                                          //   input,   width = 1,        clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,  clk_reset.reset
		.sink_ready         (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //  output,   width = 1,       sink.ready
		.sink_channel       (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //   input,   width = 2,           .channel
		.sink_data          (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //   input,  width = 93,           .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //   input,   width = 1,           .endofpacket
		.sink_valid         (nios2_gen2_0_instruction_master_limiter_cmd_valid_data),        //   input,   width = 2, sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                      //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                      //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_001_src0_data),                                       //  output,  width = 93,           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                    //  output,   width = 2,           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                              //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                      //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                      //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_001_src1_data),                                       //  output,  width = 93,           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                    //  output,   width = 2,           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                              //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                                 //  output,   width = 1,           .endofpacket
	);

	Nios_altera_merlin_multiplexer_171_rreylyq cmd_mux (
		.clk                 (clock_in_out_clk_clk),                           //   input,   width = 1,       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                              //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                               //  output,  width = 93,          .data
		.src_channel         (cmd_mux_src_channel),                            //  output,   width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //   input,   width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                            //   input,  width = 93,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                     //   input,   width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //  output,   width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //   input,   width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //   input,   width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //   input,  width = 93,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //   input,   width = 1,          .endofpacket
	);

	Nios_altera_merlin_multiplexer_171_rreylyq cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                           //   input,   width = 1,       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //  output,   width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                           //  output,  width = 93,          .data
		.src_channel         (cmd_mux_001_src_channel),                        //  output,   width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //   input,   width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                            //   input,  width = 93,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                     //   input,   width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //  output,   width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //   input,   width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //   input,   width = 2,          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //   input,  width = 93,          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //   input,   width = 1,          .endofpacket
	);

	Nios_altera_merlin_demultiplexer_171_wqjhr4q rsp_demux (
		.clk                (clock_in_out_clk_clk),                           //   input,   width = 1,       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //  output,   width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                         //   input,   width = 2,          .channel
		.sink_data          (router_002_src_data),                            //   input,  width = 93,          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //   input,   width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                           //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                            //  output,  width = 93,          .data
		.src0_channel       (rsp_demux_src0_channel),                         //  output,   width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                     //  output,   width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                           //   input,   width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                           //  output,   width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                            //  output,  width = 93,          .data
		.src1_channel       (rsp_demux_src1_channel),                         //  output,   width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                   //  output,   width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                      //  output,   width = 1,          .endofpacket
	);

	Nios_altera_merlin_demultiplexer_171_wqjhr4q rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                           //   input,   width = 1,       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //  output,   width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                         //   input,   width = 2,          .channel
		.sink_data          (router_003_src_data),                            //   input,  width = 93,          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //   input,   width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                           //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //  output,  width = 93,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //  output,   width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                 //  output,   width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                       //   input,   width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                       //  output,   width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                        //  output,  width = 93,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                     //  output,   width = 2,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),               //  output,   width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                  //  output,   width = 1,          .endofpacket
	);

	Nios_altera_merlin_multiplexer_171_v6nl2fq rsp_mux (
		.clk                 (clock_in_out_clk_clk),                           //   input,   width = 1,       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                              //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                               //  output,  width = 93,          .data
		.src_channel         (rsp_mux_src_channel),                            //  output,   width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //   input,   width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                            //   input,  width = 93,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                     //   input,   width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                       //  output,   width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                       //   input,   width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                     //   input,   width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                        //   input,  width = 93,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),               //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                  //   input,   width = 1,          .endofpacket
	);

	Nios_altera_merlin_multiplexer_171_v6nl2fq rsp_mux_001 (
		.clk                 (clock_in_out_clk_clk),                           //   input,   width = 1,       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //  output,   width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                           //  output,  width = 93,          .data
		.src_channel         (rsp_mux_001_src_channel),                        //  output,   width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                           //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                           //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                         //   input,   width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                            //   input,  width = 93,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                     //   input,   width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                       //  output,   width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                       //   input,   width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                     //   input,   width = 2,          .channel
		.sink1_data          (rsp_demux_001_src1_data),                        //   input,  width = 93,          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),               //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket)                  //   input,   width = 1,          .endofpacket
	);

	Nios_altera_avalon_st_adapter_171_yxzsrmq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,         .ready
		.in_clk_0_clk   (clock_in_out_clk_clk),                                    //   input,   width = 1, in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          //   input,   width = 1, in_rst_0.reset
		.out_0_data     (avalon_st_adapter_out_0_data),                            //  output,  width = 34,    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                           //  output,   width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                           //   input,   width = 1,         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                            //  output,   width = 1,         .error
	);

	Nios_altera_avalon_st_adapter_171_yxzsrmq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //   input,  width = 34,     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //   input,   width = 1,         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //  output,   width = 1,         .ready
		.in_clk_0_clk   (clock_in_out_clk_clk),                           //   input,   width = 1, in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, in_rst_0.reset
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //  output,  width = 34,    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //  output,   width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //   input,   width = 1,         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //  output,   width = 1,         .error
	);

endmodule
