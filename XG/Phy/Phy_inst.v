	Phy u0 (
		.reconfig_write          (_connected_to_reconfig_write_),          //   input,   width = 1,           reconfig_avmm.write
		.reconfig_read           (_connected_to_reconfig_read_),           //   input,   width = 1,                        .read
		.reconfig_address        (_connected_to_reconfig_address_),        //   input,  width = 10,                        .address
		.reconfig_writedata      (_connected_to_reconfig_writedata_),      //   input,  width = 32,                        .writedata
		.reconfig_readdata       (_connected_to_reconfig_readdata_),       //  output,  width = 32,                        .readdata
		.reconfig_waitrequest    (_connected_to_reconfig_waitrequest_),    //  output,   width = 1,                        .waitrequest
		.reconfig_clk            (_connected_to_reconfig_clk_),            //   input,   width = 1,            reconfig_clk.clk
		.reconfig_reset          (_connected_to_reconfig_reset_),          //   input,   width = 1,          reconfig_reset.reset
		.rx_analogreset          (_connected_to_rx_analogreset_),          //   input,   width = 1,          rx_analogreset.rx_analogreset
		.rx_cal_busy             (_connected_to_rx_cal_busy_),             //  output,   width = 1,             rx_cal_busy.rx_cal_busy
		.rx_cdr_refclk0          (_connected_to_rx_cdr_refclk0_),          //   input,   width = 1,          rx_cdr_refclk0.clk
		.rx_clkout               (_connected_to_rx_clkout_),               //  output,   width = 1,               rx_clkout.clk
		.rx_control              (_connected_to_rx_control_),              //  output,   width = 8,              rx_control.rx_control
		.rx_coreclkin            (_connected_to_rx_coreclkin_),            //   input,   width = 1,            rx_coreclkin.clk
		.rx_digitalreset         (_connected_to_rx_digitalreset_),         //   input,   width = 1,         rx_digitalreset.rx_digitalreset
		.rx_enh_blk_lock         (_connected_to_rx_enh_blk_lock_),         //  output,   width = 1,         rx_enh_blk_lock.rx_enh_blk_lock
		.rx_enh_data_valid       (_connected_to_rx_enh_data_valid_),       //  output,   width = 1,       rx_enh_data_valid.rx_enh_data_valid
		.rx_enh_fifo_del         (_connected_to_rx_enh_fifo_del_),         //  output,   width = 1,         rx_enh_fifo_del.rx_enh_fifo_del
		.rx_enh_fifo_empty       (_connected_to_rx_enh_fifo_empty_),       //  output,   width = 1,       rx_enh_fifo_empty.rx_enh_fifo_empty
		.rx_enh_fifo_full        (_connected_to_rx_enh_fifo_full_),        //  output,   width = 1,        rx_enh_fifo_full.rx_enh_fifo_full
		.rx_enh_fifo_insert      (_connected_to_rx_enh_fifo_insert_),      //  output,   width = 1,      rx_enh_fifo_insert.rx_enh_fifo_insert
		.rx_enh_highber          (_connected_to_rx_enh_highber_),          //  output,   width = 1,          rx_enh_highber.rx_enh_highber
		.rx_is_lockedtodata      (_connected_to_rx_is_lockedtodata_),      //  output,   width = 1,      rx_is_lockedtodata.rx_is_lockedtodata
		.rx_is_lockedtoref       (_connected_to_rx_is_lockedtoref_),       //  output,   width = 1,       rx_is_lockedtoref.rx_is_lockedtoref
		.rx_parallel_data        (_connected_to_rx_parallel_data_),        //  output,  width = 64,        rx_parallel_data.rx_parallel_data
		.rx_pma_div_clkout       (_connected_to_rx_pma_div_clkout_),       //  output,   width = 1,       rx_pma_div_clkout.clk
		.rx_serial_data          (_connected_to_rx_serial_data_),          //   input,   width = 1,          rx_serial_data.rx_serial_data
		.tx_analogreset          (_connected_to_tx_analogreset_),          //   input,   width = 1,          tx_analogreset.tx_analogreset
		.tx_cal_busy             (_connected_to_tx_cal_busy_),             //  output,   width = 1,             tx_cal_busy.tx_cal_busy
		.tx_clkout               (_connected_to_tx_clkout_),               //  output,   width = 1,               tx_clkout.clk
		.tx_control              (_connected_to_tx_control_),              //   input,   width = 8,              tx_control.tx_control
		.tx_coreclkin            (_connected_to_tx_coreclkin_),            //   input,   width = 1,            tx_coreclkin.clk
		.tx_digitalreset         (_connected_to_tx_digitalreset_),         //   input,   width = 1,         tx_digitalreset.tx_digitalreset
		.tx_enh_data_valid       (_connected_to_tx_enh_data_valid_),       //   input,   width = 1,       tx_enh_data_valid.tx_enh_data_valid
		.tx_enh_fifo_empty       (_connected_to_tx_enh_fifo_empty_),       //  output,   width = 1,       tx_enh_fifo_empty.tx_enh_fifo_empty
		.tx_enh_fifo_full        (_connected_to_tx_enh_fifo_full_),        //  output,   width = 1,        tx_enh_fifo_full.tx_enh_fifo_full
		.tx_enh_fifo_pempty      (_connected_to_tx_enh_fifo_pempty_),      //  output,   width = 1,      tx_enh_fifo_pempty.tx_enh_fifo_pempty
		.tx_enh_fifo_pfull       (_connected_to_tx_enh_fifo_pfull_),       //  output,   width = 1,       tx_enh_fifo_pfull.tx_enh_fifo_pfull
		.tx_err_ins              (_connected_to_tx_err_ins_),              //   input,   width = 1,              tx_err_ins.tx_err_ins
		.tx_parallel_data        (_connected_to_tx_parallel_data_),        //   input,  width = 64,        tx_parallel_data.tx_parallel_data
		.tx_pma_div_clkout       (_connected_to_tx_pma_div_clkout_),       //  output,   width = 1,       tx_pma_div_clkout.clk
		.tx_serial_clk0          (_connected_to_tx_serial_clk0_),          //   input,   width = 1,          tx_serial_clk0.clk
		.tx_serial_data          (_connected_to_tx_serial_data_),          //  output,   width = 1,          tx_serial_data.tx_serial_data
		.unused_rx_control       (_connected_to_unused_rx_control_),       //  output,  width = 12,       unused_rx_control.unused_rx_control
		.unused_rx_parallel_data (_connected_to_unused_rx_parallel_data_), //  output,  width = 64, unused_rx_parallel_data.unused_rx_parallel_data
		.unused_tx_control       (_connected_to_unused_tx_control_),       //   input,   width = 9,       unused_tx_control.unused_tx_control
		.unused_tx_parallel_data (_connected_to_unused_tx_parallel_data_)  //   input,  width = 64, unused_tx_parallel_data.unused_tx_parallel_data
	);

