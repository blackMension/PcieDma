// ep_g3x8_avmm256_altera_mm_interconnect_171_glb5asi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1.2 304

`timescale 1 ps / 1 ps
module ep_g3x8_avmm256_altera_mm_interconnect_171_glb5asi (
		input  wire         DUT_coreclkout_hip_clk,                              //                            DUT_coreclkout_hip.clk
		input  wire [63:0]  DUT_dma_wr_master_address,                           //                             DUT_dma_wr_master.address
		output wire         DUT_dma_wr_master_waitrequest,                       //                                              .waitrequest
		input  wire [4:0]   DUT_dma_wr_master_burstcount,                        //                                              .burstcount
		input  wire         DUT_dma_wr_master_read,                              //                                              .read
		output wire [255:0] DUT_dma_wr_master_readdata,                          //                                              .readdata
		output wire         DUT_dma_wr_master_readdatavalid,                     //                                              .readdatavalid
		input  wire         onchip_memory2_0_reset2_reset_bridge_in_reset_reset, // onchip_memory2_0_reset2_reset_bridge_in_reset.reset
		output wire [9:0]   onchip_memory2_0_s2_address,                         //                           onchip_memory2_0_s2.address
		output wire         onchip_memory2_0_s2_write,                           //                                              .write
		input  wire [255:0] onchip_memory2_0_s2_readdata,                        //                                              .readdata
		output wire [255:0] onchip_memory2_0_s2_writedata,                       //                                              .writedata
		output wire [31:0]  onchip_memory2_0_s2_byteenable,                      //                                              .byteenable
		output wire         onchip_memory2_0_s2_chipselect,                      //                                              .chipselect
		output wire         onchip_memory2_0_s2_clken                            //                                              .clken
	);

	wire          dut_dma_wr_master_translator_avalon_universal_master_0_waitrequest;   // DUT_dma_wr_master_agent:av_waitrequest -> DUT_dma_wr_master_translator:uav_waitrequest
	wire  [255:0] dut_dma_wr_master_translator_avalon_universal_master_0_readdata;      // DUT_dma_wr_master_agent:av_readdata -> DUT_dma_wr_master_translator:uav_readdata
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_debugaccess;   // DUT_dma_wr_master_translator:uav_debugaccess -> DUT_dma_wr_master_agent:av_debugaccess
	wire   [63:0] dut_dma_wr_master_translator_avalon_universal_master_0_address;       // DUT_dma_wr_master_translator:uav_address -> DUT_dma_wr_master_agent:av_address
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_read;          // DUT_dma_wr_master_translator:uav_read -> DUT_dma_wr_master_agent:av_read
	wire   [31:0] dut_dma_wr_master_translator_avalon_universal_master_0_byteenable;    // DUT_dma_wr_master_translator:uav_byteenable -> DUT_dma_wr_master_agent:av_byteenable
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_readdatavalid; // DUT_dma_wr_master_agent:av_readdatavalid -> DUT_dma_wr_master_translator:uav_readdatavalid
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_lock;          // DUT_dma_wr_master_translator:uav_lock -> DUT_dma_wr_master_agent:av_lock
	wire          dut_dma_wr_master_translator_avalon_universal_master_0_write;         // DUT_dma_wr_master_translator:uav_write -> DUT_dma_wr_master_agent:av_write
	wire  [255:0] dut_dma_wr_master_translator_avalon_universal_master_0_writedata;     // DUT_dma_wr_master_translator:uav_writedata -> DUT_dma_wr_master_agent:av_writedata
	wire    [9:0] dut_dma_wr_master_translator_avalon_universal_master_0_burstcount;    // DUT_dma_wr_master_translator:uav_burstcount -> DUT_dma_wr_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> DUT_dma_wr_master_agent:rp_valid
	wire  [392:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> DUT_dma_wr_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                    // DUT_dma_wr_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> DUT_dma_wr_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> DUT_dma_wr_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> DUT_dma_wr_master_agent:rp_endofpacket
	wire  [255:0] onchip_memory2_0_s2_agent_m0_readdata;                                // onchip_memory2_0_s2_translator:uav_readdata -> onchip_memory2_0_s2_agent:m0_readdata
	wire          onchip_memory2_0_s2_agent_m0_waitrequest;                             // onchip_memory2_0_s2_translator:uav_waitrequest -> onchip_memory2_0_s2_agent:m0_waitrequest
	wire          onchip_memory2_0_s2_agent_m0_debugaccess;                             // onchip_memory2_0_s2_agent:m0_debugaccess -> onchip_memory2_0_s2_translator:uav_debugaccess
	wire   [63:0] onchip_memory2_0_s2_agent_m0_address;                                 // onchip_memory2_0_s2_agent:m0_address -> onchip_memory2_0_s2_translator:uav_address
	wire   [31:0] onchip_memory2_0_s2_agent_m0_byteenable;                              // onchip_memory2_0_s2_agent:m0_byteenable -> onchip_memory2_0_s2_translator:uav_byteenable
	wire          onchip_memory2_0_s2_agent_m0_read;                                    // onchip_memory2_0_s2_agent:m0_read -> onchip_memory2_0_s2_translator:uav_read
	wire          onchip_memory2_0_s2_agent_m0_readdatavalid;                           // onchip_memory2_0_s2_translator:uav_readdatavalid -> onchip_memory2_0_s2_agent:m0_readdatavalid
	wire          onchip_memory2_0_s2_agent_m0_lock;                                    // onchip_memory2_0_s2_agent:m0_lock -> onchip_memory2_0_s2_translator:uav_lock
	wire  [255:0] onchip_memory2_0_s2_agent_m0_writedata;                               // onchip_memory2_0_s2_agent:m0_writedata -> onchip_memory2_0_s2_translator:uav_writedata
	wire          onchip_memory2_0_s2_agent_m0_write;                                   // onchip_memory2_0_s2_agent:m0_write -> onchip_memory2_0_s2_translator:uav_write
	wire    [5:0] onchip_memory2_0_s2_agent_m0_burstcount;                              // onchip_memory2_0_s2_agent:m0_burstcount -> onchip_memory2_0_s2_translator:uav_burstcount
	wire          onchip_memory2_0_s2_agent_rf_source_valid;                            // onchip_memory2_0_s2_agent:rf_source_valid -> onchip_memory2_0_s2_agent_rsp_fifo:in_valid
	wire  [393:0] onchip_memory2_0_s2_agent_rf_source_data;                             // onchip_memory2_0_s2_agent:rf_source_data -> onchip_memory2_0_s2_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s2_agent_rf_source_ready;                            // onchip_memory2_0_s2_agent_rsp_fifo:in_ready -> onchip_memory2_0_s2_agent:rf_source_ready
	wire          onchip_memory2_0_s2_agent_rf_source_startofpacket;                    // onchip_memory2_0_s2_agent:rf_source_startofpacket -> onchip_memory2_0_s2_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s2_agent_rf_source_endofpacket;                      // onchip_memory2_0_s2_agent:rf_source_endofpacket -> onchip_memory2_0_s2_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_valid;                         // onchip_memory2_0_s2_agent_rsp_fifo:out_valid -> onchip_memory2_0_s2_agent:rf_sink_valid
	wire  [393:0] onchip_memory2_0_s2_agent_rsp_fifo_out_data;                          // onchip_memory2_0_s2_agent_rsp_fifo:out_data -> onchip_memory2_0_s2_agent:rf_sink_data
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_ready;                         // onchip_memory2_0_s2_agent:rf_sink_ready -> onchip_memory2_0_s2_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket;                 // onchip_memory2_0_s2_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s2_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket;                   // onchip_memory2_0_s2_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s2_agent:rf_sink_endofpacket
	wire          dut_dma_wr_master_agent_cp_valid;                                     // DUT_dma_wr_master_agent:cp_valid -> router:sink_valid
	wire  [392:0] dut_dma_wr_master_agent_cp_data;                                      // DUT_dma_wr_master_agent:cp_data -> router:sink_data
	wire          dut_dma_wr_master_agent_cp_ready;                                     // router:sink_ready -> DUT_dma_wr_master_agent:cp_ready
	wire          dut_dma_wr_master_agent_cp_startofpacket;                             // DUT_dma_wr_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dut_dma_wr_master_agent_cp_endofpacket;                               // DUT_dma_wr_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                     // router:src_valid -> cmd_demux:sink_valid
	wire  [392:0] router_src_data;                                                      // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                     // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                   // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                             // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                               // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          onchip_memory2_0_s2_agent_rp_valid;                                   // onchip_memory2_0_s2_agent:rp_valid -> router_001:sink_valid
	wire  [392:0] onchip_memory2_0_s2_agent_rp_data;                                    // onchip_memory2_0_s2_agent:rp_data -> router_001:sink_data
	wire          onchip_memory2_0_s2_agent_rp_ready;                                   // router_001:sink_ready -> onchip_memory2_0_s2_agent:rp_ready
	wire          onchip_memory2_0_s2_agent_rp_startofpacket;                           // onchip_memory2_0_s2_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          onchip_memory2_0_s2_agent_rp_endofpacket;                             // onchip_memory2_0_s2_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                 // router_001:src_valid -> rsp_demux:sink_valid
	wire  [392:0] router_001_src_data;                                                  // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                 // rsp_demux:sink_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                               // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                         // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                           // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> onchip_memory2_0_s2_burst_adapter:sink0_valid
	wire  [392:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> onchip_memory2_0_s2_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                    // onchip_memory2_0_s2_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> onchip_memory2_0_s2_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> onchip_memory2_0_s2_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> onchip_memory2_0_s2_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s2_burst_adapter_source0_valid;                      // onchip_memory2_0_s2_burst_adapter:source0_valid -> onchip_memory2_0_s2_agent:cp_valid
	wire  [392:0] onchip_memory2_0_s2_burst_adapter_source0_data;                       // onchip_memory2_0_s2_burst_adapter:source0_data -> onchip_memory2_0_s2_agent:cp_data
	wire          onchip_memory2_0_s2_burst_adapter_source0_ready;                      // onchip_memory2_0_s2_agent:cp_ready -> onchip_memory2_0_s2_burst_adapter:source0_ready
	wire    [0:0] onchip_memory2_0_s2_burst_adapter_source0_channel;                    // onchip_memory2_0_s2_burst_adapter:source0_channel -> onchip_memory2_0_s2_agent:cp_channel
	wire          onchip_memory2_0_s2_burst_adapter_source0_startofpacket;              // onchip_memory2_0_s2_burst_adapter:source0_startofpacket -> onchip_memory2_0_s2_agent:cp_startofpacket
	wire          onchip_memory2_0_s2_burst_adapter_source0_endofpacket;                // onchip_memory2_0_s2_burst_adapter:source0_endofpacket -> onchip_memory2_0_s2_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [392:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [392:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          onchip_memory2_0_s2_agent_rdata_fifo_src_valid;                       // onchip_memory2_0_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] onchip_memory2_0_s2_agent_rdata_fifo_src_data;                        // onchip_memory2_0_s2_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory2_0_s2_agent_rdata_fifo_src_ready;                       // avalon_st_adapter:in_0_ready -> onchip_memory2_0_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                        // avalon_st_adapter:out_0_valid -> onchip_memory2_0_s2_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                         // avalon_st_adapter:out_0_data -> onchip_memory2_0_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                        // onchip_memory2_0_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                        // avalon_st_adapter:out_0_error -> onchip_memory2_0_s2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dut_dma_wr_master_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                                                                                                                                                                                                                                //   input,    width = 1,                       clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                                                                                                                                                                                                                   //   input,    width = 1,                     reset.reset
		.uav_address            (dut_dma_wr_master_translator_avalon_universal_master_0_address),                                                                                                                                                                                                        //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (dut_dma_wr_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                                     //  output,   width = 10,                          .burstcount
		.uav_read               (dut_dma_wr_master_translator_avalon_universal_master_0_read),                                                                                                                                                                                                           //  output,    width = 1,                          .read
		.uav_write              (dut_dma_wr_master_translator_avalon_universal_master_0_write),                                                                                                                                                                                                          //  output,    width = 1,                          .write
		.uav_waitrequest        (dut_dma_wr_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                                    //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (dut_dma_wr_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                                  //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (dut_dma_wr_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                                     //  output,   width = 32,                          .byteenable
		.uav_readdata           (dut_dma_wr_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                                       //   input,  width = 256,                          .readdata
		.uav_writedata          (dut_dma_wr_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                                      //  output,  width = 256,                          .writedata
		.uav_lock               (dut_dma_wr_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                                                           //  output,    width = 1,                          .lock
		.uav_debugaccess        (dut_dma_wr_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                                    //  output,    width = 1,                          .debugaccess
		.av_address             (DUT_dma_wr_master_address),                                                                                                                                                                                                                                             //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (DUT_dma_wr_master_waitrequest),                                                                                                                                                                                                                                         //  output,    width = 1,                          .waitrequest
		.av_burstcount          (DUT_dma_wr_master_burstcount),                                                                                                                                                                                                                                          //   input,    width = 5,                          .burstcount
		.av_read                (DUT_dma_wr_master_read),                                                                                                                                                                                                                                                //   input,    width = 1,                          .read
		.av_readdata            (DUT_dma_wr_master_readdata),                                                                                                                                                                                                                                            //  output,  width = 256,                          .readdata
		.av_readdatavalid       (DUT_dma_wr_master_readdatavalid),                                                                                                                                                                                                                                       //  output,    width = 1,                          .readdatavalid
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  // (terminated),                                         
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                         
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.uav_clken              (),                                                                                                                                                                                                                                                                      // (terminated),                                         
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                         
		.av_response            (),                                                                                                                                                                                                                                                                      // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       // (terminated),                                         
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s2_translator (
		.clk                    (DUT_coreclkout_hip_clk),                              //   input,    width = 1,                      clk.clk
		.reset                  (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (onchip_memory2_0_s2_agent_m0_address),                //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s2_agent_m0_burstcount),             //   input,    width = 6,                         .burstcount
		.uav_read               (onchip_memory2_0_s2_agent_m0_read),                   //   input,    width = 1,                         .read
		.uav_write              (onchip_memory2_0_s2_agent_m0_write),                  //   input,    width = 1,                         .write
		.uav_waitrequest        (onchip_memory2_0_s2_agent_m0_waitrequest),            //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s2_agent_m0_readdatavalid),          //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s2_agent_m0_byteenable),             //   input,   width = 32,                         .byteenable
		.uav_readdata           (onchip_memory2_0_s2_agent_m0_readdata),               //  output,  width = 256,                         .readdata
		.uav_writedata          (onchip_memory2_0_s2_agent_m0_writedata),              //   input,  width = 256,                         .writedata
		.uav_lock               (onchip_memory2_0_s2_agent_m0_lock),                   //   input,    width = 1,                         .lock
		.uav_debugaccess        (onchip_memory2_0_s2_agent_m0_debugaccess),            //   input,    width = 1,                         .debugaccess
		.av_address             (onchip_memory2_0_s2_address),                         //  output,   width = 10,      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s2_write),                           //  output,    width = 1,                         .write
		.av_readdata            (onchip_memory2_0_s2_readdata),                        //   input,  width = 256,                         .readdata
		.av_writedata           (onchip_memory2_0_s2_writedata),                       //  output,  width = 256,                         .writedata
		.av_byteenable          (onchip_memory2_0_s2_byteenable),                      //  output,   width = 32,                         .byteenable
		.av_chipselect          (onchip_memory2_0_s2_chipselect),                      //  output,    width = 1,                         .chipselect
		.av_clken               (onchip_memory2_0_s2_clken),                           //  output,    width = 1,                         .clken
		.av_read                (),                                                    // (terminated),                                        
		.av_begintransfer       (),                                                    // (terminated),                                        
		.av_beginbursttransfer  (),                                                    // (terminated),                                        
		.av_burstcount          (),                                                    // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                // (terminated),                                        
		.av_waitrequest         (1'b0),                                                // (terminated),                                        
		.av_writebyteenable     (),                                                    // (terminated),                                        
		.av_lock                (),                                                    // (terminated),                                        
		.uav_clken              (1'b0),                                                // (terminated),                                        
		.av_debugaccess         (),                                                    // (terminated),                                        
		.av_outputenable        (),                                                    // (terminated),                                        
		.uav_response           (),                                                    // (terminated),                                        
		.av_response            (2'b00),                                               // (terminated),                                        
		.uav_writeresponsevalid (),                                                    // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                 // (terminated),                                        
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (392),
		.PKT_ORI_BURST_SIZE_L      (390),
		.PKT_RESPONSE_STATUS_H     (389),
		.PKT_RESPONSE_STATUS_L     (388),
		.PKT_QOS_H                 (377),
		.PKT_QOS_L                 (377),
		.PKT_DATA_SIDEBAND_H       (375),
		.PKT_DATA_SIDEBAND_L       (375),
		.PKT_ADDR_SIDEBAND_H       (374),
		.PKT_ADDR_SIDEBAND_L       (374),
		.PKT_BURST_TYPE_H          (373),
		.PKT_BURST_TYPE_L          (372),
		.PKT_CACHE_H               (387),
		.PKT_CACHE_L               (384),
		.PKT_THREAD_ID_H           (380),
		.PKT_THREAD_ID_L           (380),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (383),
		.PKT_PROTECTION_L          (381),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (378),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (379),
		.PKT_DEST_ID_L             (379),
		.ST_DATA_W                 (393),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dut_dma_wr_master_agent (
		.clk                   (DUT_coreclkout_hip_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.av_address            (dut_dma_wr_master_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (dut_dma_wr_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dut_dma_wr_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dut_dma_wr_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (dut_dma_wr_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (dut_dma_wr_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dut_dma_wr_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dut_dma_wr_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (dut_dma_wr_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (dut_dma_wr_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dut_dma_wr_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dut_dma_wr_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dut_dma_wr_master_agent_cp_data),                                      //  output,  width = 393,          .data
		.cp_startofpacket      (dut_dma_wr_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dut_dma_wr_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dut_dma_wr_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                    //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                     //   input,  width = 393,          .data
		.rp_channel            (rsp_mux_src_channel),                                                  //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                    //  output,    width = 1,          .ready
		.av_response           (),                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                      // (terminated),                         
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (392),
		.PKT_ORI_BURST_SIZE_L      (390),
		.PKT_RESPONSE_STATUS_H     (389),
		.PKT_RESPONSE_STATUS_L     (388),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (383),
		.PKT_PROTECTION_L          (381),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (378),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (379),
		.PKT_DEST_ID_L             (379),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (393),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s2_agent (
		.clk                     (DUT_coreclkout_hip_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_memory2_0_s2_agent_m0_address),                    //  output,   width = 64,              m0.address
		.m0_burstcount           (onchip_memory2_0_s2_agent_m0_burstcount),                 //  output,    width = 6,                .burstcount
		.m0_byteenable           (onchip_memory2_0_s2_agent_m0_byteenable),                 //  output,   width = 32,                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s2_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_memory2_0_s2_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (onchip_memory2_0_s2_agent_m0_readdata),                   //   input,  width = 256,                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s2_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_memory2_0_s2_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_memory2_0_s2_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_memory2_0_s2_agent_m0_writedata),                  //  output,  width = 256,                .writedata
		.m0_write                (onchip_memory2_0_s2_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_memory2_0_s2_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s2_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (onchip_memory2_0_s2_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (onchip_memory2_0_s2_agent_rp_data),                       //  output,  width = 393,                .data
		.rp_startofpacket        (onchip_memory2_0_s2_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (onchip_memory2_0_s2_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (onchip_memory2_0_s2_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (onchip_memory2_0_s2_burst_adapter_source0_data),          //   input,  width = 393,                .data
		.cp_startofpacket        (onchip_memory2_0_s2_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s2_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (onchip_memory2_0_s2_burst_adapter_source0_channel),       //   input,    width = 1,                .channel
		.rf_sink_ready           (onchip_memory2_0_s2_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s2_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s2_agent_rsp_fifo_out_data),             //   input,  width = 394,                .data
		.rf_source_ready         (onchip_memory2_0_s2_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s2_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_memory2_0_s2_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s2_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_memory2_0_s2_agent_rf_source_data),                //  output,  width = 394,                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //   input,  width = 258,                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //   input,    width = 1,                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s2_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s2_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s2_agent_rdata_fifo_src_data),           //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0)                                                     // (terminated),                               
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (394),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s2_agent_rsp_fifo (
		.clk               (DUT_coreclkout_hip_clk),                               //   input,    width = 1,       clk.clk
		.reset             (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s2_agent_rf_source_data),             //   input,  width = 394,        in.data
		.in_valid          (onchip_memory2_0_s2_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_memory2_0_s2_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_memory2_0_s2_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s2_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_memory2_0_s2_agent_rsp_fifo_out_data),          //  output,  width = 394,       out.data
		.out_valid         (onchip_memory2_0_s2_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_memory2_0_s2_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	ep_g3x8_avmm256_altera_merlin_router_171_eb7dply router (
		.sink_ready         (dut_dma_wr_master_agent_cp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (dut_dma_wr_master_agent_cp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (dut_dma_wr_master_agent_cp_data),                     //   input,  width = 393,          .data
		.sink_startofpacket (dut_dma_wr_master_agent_cp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dut_dma_wr_master_agent_cp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                     //  output,  width = 393,          .data
		.src_channel        (router_src_channel),                                  //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_router_171_fpb3wlq router_001 (
		.sink_ready         (onchip_memory2_0_s2_agent_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_memory2_0_s2_agent_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (onchip_memory2_0_s2_agent_rp_data),                   //   input,  width = 393,          .data
		.sink_startofpacket (onchip_memory2_0_s2_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s2_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                 //  output,  width = 393,          .data
		.src_channel        (router_001_src_channel),                              //  output,    width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (376),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_BURST_TYPE_H          (373),
		.PKT_BURST_TYPE_L          (372),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (393),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (363),
		.OUT_BURSTWRAP_H           (368),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s2_burst_adapter (
		.clk                   (DUT_coreclkout_hip_clk),                                  //   input,    width = 1,       cr0.clk
		.reset                 (onchip_memory2_0_reset2_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //   input,  width = 393,          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //   input,    width = 1,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //  output,    width = 1,          .ready
		.source0_valid         (onchip_memory2_0_s2_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (onchip_memory2_0_s2_burst_adapter_source0_data),          //  output,  width = 393,          .data
		.source0_channel       (onchip_memory2_0_s2_burst_adapter_source0_channel),       //  output,    width = 1,          .channel
		.source0_startofpacket (onchip_memory2_0_s2_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s2_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (onchip_memory2_0_s2_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	ep_g3x8_avmm256_altera_merlin_demultiplexer_171_zgmngca cmd_demux (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                  //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                                     //   input,  width = 393,          .data
		.sink_startofpacket (router_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                 //  output,  width = 393,          .data
		.src0_channel       (cmd_demux_src0_channel),                              //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_multiplexer_171_frt5vea cmd_mux (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                    //  output,  width = 393,          .data
		.src_channel         (cmd_mux_src_channel),                                 //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //   input,    width = 1,          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //   input,  width = 393,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                           //   input,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_demultiplexer_171_zgmngca rsp_demux (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                              //   input,    width = 1,          .channel
		.sink_data          (router_001_src_data),                                 //   input,  width = 393,          .data
		.sink_startofpacket (router_001_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                 //  output,  width = 393,          .data
		.src0_channel       (rsp_demux_src0_channel),                              //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_multiplexer_171_mhqksua rsp_mux (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                    //  output,  width = 393,          .data
		.src_channel         (rsp_mux_src_channel),                                 //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                              //   input,    width = 1,          .channel
		.sink0_data          (rsp_demux_src0_data),                                 //   input,  width = 393,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                           //   input,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_avalon_st_adapter_171_l5ksb3y #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_0_data      (onchip_memory2_0_s2_agent_rdata_fifo_src_data),       //   input,  width = 258,     in_0.data
		.in_0_valid     (onchip_memory2_0_s2_agent_rdata_fifo_src_valid),      //   input,    width = 1,         .valid
		.in_0_ready     (onchip_memory2_0_s2_agent_rdata_fifo_src_ready),      //  output,    width = 1,         .ready
		.in_clk_0_clk   (DUT_coreclkout_hip_clk),                              //   input,    width = 1, in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset2_reset_bridge_in_reset_reset), //   input,    width = 1, in_rst_0.reset
		.out_0_data     (avalon_st_adapter_out_0_data),                        //  output,  width = 258,    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //  output,    width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //   input,    width = 1,         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //  output,    width = 1,         .error
	);

endmodule
