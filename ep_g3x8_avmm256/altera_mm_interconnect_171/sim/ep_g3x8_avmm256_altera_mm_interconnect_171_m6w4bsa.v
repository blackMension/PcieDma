// ep_g3x8_avmm256_altera_mm_interconnect_171_m6w4bsa.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1.2 304

`timescale 1 ps / 1 ps
module ep_g3x8_avmm256_altera_mm_interconnect_171_m6w4bsa (
		input  wire         DUT_coreclkout_hip_clk,                              //                            DUT_coreclkout_hip.clk
		input  wire [63:0]  DUT_dma_rd_master_address,                           //                             DUT_dma_rd_master.address
		output wire         DUT_dma_rd_master_waitrequest,                       //                                              .waitrequest
		input  wire [4:0]   DUT_dma_rd_master_burstcount,                        //                                              .burstcount
		input  wire [31:0]  DUT_dma_rd_master_byteenable,                        //                                              .byteenable
		input  wire         DUT_dma_rd_master_write,                             //                                              .write
		input  wire [255:0] DUT_dma_rd_master_writedata,                         //                                              .writedata
		input  wire [63:0]  DUT_rxm_bar4_address,                                //                                  DUT_rxm_bar4.address
		output wire         DUT_rxm_bar4_waitrequest,                            //                                              .waitrequest
		input  wire [3:0]   DUT_rxm_bar4_byteenable,                             //                                              .byteenable
		input  wire         DUT_rxm_bar4_read,                                   //                                              .read
		output wire [31:0]  DUT_rxm_bar4_readdata,                               //                                              .readdata
		output wire         DUT_rxm_bar4_readdatavalid,                          //                                              .readdatavalid
		input  wire         DUT_rxm_bar4_write,                                  //                                              .write
		input  wire [31:0]  DUT_rxm_bar4_writedata,                              //                                              .writedata
		output wire [7:0]   dma_control_0_RdDTS_slave_address,                   //                     dma_control_0_RdDTS_slave.address
		output wire         dma_control_0_RdDTS_slave_write,                     //                                              .write
		output wire [255:0] dma_control_0_RdDTS_slave_writedata,                 //                                              .writedata
		output wire [4:0]   dma_control_0_RdDTS_slave_burstcount,                //                                              .burstcount
		input  wire         dma_control_0_RdDTS_slave_waitrequest,               //                                              .waitrequest
		output wire         dma_control_0_RdDTS_slave_chipselect,                //                                              .chipselect
		input  wire         dma_control_0_Resetn_reset_bridge_in_reset_reset,    //    dma_control_0_Resetn_reset_bridge_in_reset.reset
		output wire [7:0]   dma_control_0_WrDTS_slave_address,                   //                     dma_control_0_WrDTS_slave.address
		output wire         dma_control_0_WrDTS_slave_write,                     //                                              .write
		output wire [255:0] dma_control_0_WrDTS_slave_writedata,                 //                                              .writedata
		output wire [4:0]   dma_control_0_WrDTS_slave_burstcount,                //                                              .burstcount
		input  wire         dma_control_0_WrDTS_slave_waitrequest,               //                                              .waitrequest
		output wire         dma_control_0_WrDTS_slave_chipselect,                //                                              .chipselect
		input  wire         onchip_memory2_0_reset1_reset_bridge_in_reset_reset, // onchip_memory2_0_reset1_reset_bridge_in_reset.reset
		output wire [9:0]   onchip_memory2_0_s1_address,                         //                           onchip_memory2_0_s1.address
		output wire         onchip_memory2_0_s1_write,                           //                                              .write
		input  wire [255:0] onchip_memory2_0_s1_readdata,                        //                                              .readdata
		output wire [255:0] onchip_memory2_0_s1_writedata,                       //                                              .writedata
		output wire [31:0]  onchip_memory2_0_s1_byteenable,                      //                                              .byteenable
		output wire         onchip_memory2_0_s1_chipselect,                      //                                              .chipselect
		output wire         onchip_memory2_0_s1_clken                            //                                              .clken
	);

	wire          dut_dma_rd_master_translator_avalon_universal_master_0_waitrequest;   // DUT_dma_rd_master_agent:av_waitrequest -> DUT_dma_rd_master_translator:uav_waitrequest
	wire  [255:0] dut_dma_rd_master_translator_avalon_universal_master_0_readdata;      // DUT_dma_rd_master_agent:av_readdata -> DUT_dma_rd_master_translator:uav_readdata
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_debugaccess;   // DUT_dma_rd_master_translator:uav_debugaccess -> DUT_dma_rd_master_agent:av_debugaccess
	wire   [63:0] dut_dma_rd_master_translator_avalon_universal_master_0_address;       // DUT_dma_rd_master_translator:uav_address -> DUT_dma_rd_master_agent:av_address
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_read;          // DUT_dma_rd_master_translator:uav_read -> DUT_dma_rd_master_agent:av_read
	wire   [31:0] dut_dma_rd_master_translator_avalon_universal_master_0_byteenable;    // DUT_dma_rd_master_translator:uav_byteenable -> DUT_dma_rd_master_agent:av_byteenable
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_readdatavalid; // DUT_dma_rd_master_agent:av_readdatavalid -> DUT_dma_rd_master_translator:uav_readdatavalid
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_lock;          // DUT_dma_rd_master_translator:uav_lock -> DUT_dma_rd_master_agent:av_lock
	wire          dut_dma_rd_master_translator_avalon_universal_master_0_write;         // DUT_dma_rd_master_translator:uav_write -> DUT_dma_rd_master_agent:av_write
	wire  [255:0] dut_dma_rd_master_translator_avalon_universal_master_0_writedata;     // DUT_dma_rd_master_translator:uav_writedata -> DUT_dma_rd_master_agent:av_writedata
	wire    [9:0] dut_dma_rd_master_translator_avalon_universal_master_0_burstcount;    // DUT_dma_rd_master_translator:uav_burstcount -> DUT_dma_rd_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> DUT_dma_rd_master_agent:rp_valid
	wire  [394:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> DUT_dma_rd_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                    // DUT_dma_rd_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> DUT_dma_rd_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> DUT_dma_rd_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> DUT_dma_rd_master_agent:rp_endofpacket
	wire          dut_rxm_bar4_translator_avalon_universal_master_0_waitrequest;        // DUT_rxm_bar4_agent:av_waitrequest -> DUT_rxm_bar4_translator:uav_waitrequest
	wire   [31:0] dut_rxm_bar4_translator_avalon_universal_master_0_readdata;           // DUT_rxm_bar4_agent:av_readdata -> DUT_rxm_bar4_translator:uav_readdata
	wire          dut_rxm_bar4_translator_avalon_universal_master_0_debugaccess;        // DUT_rxm_bar4_translator:uav_debugaccess -> DUT_rxm_bar4_agent:av_debugaccess
	wire   [63:0] dut_rxm_bar4_translator_avalon_universal_master_0_address;            // DUT_rxm_bar4_translator:uav_address -> DUT_rxm_bar4_agent:av_address
	wire          dut_rxm_bar4_translator_avalon_universal_master_0_read;               // DUT_rxm_bar4_translator:uav_read -> DUT_rxm_bar4_agent:av_read
	wire    [3:0] dut_rxm_bar4_translator_avalon_universal_master_0_byteenable;         // DUT_rxm_bar4_translator:uav_byteenable -> DUT_rxm_bar4_agent:av_byteenable
	wire          dut_rxm_bar4_translator_avalon_universal_master_0_readdatavalid;      // DUT_rxm_bar4_agent:av_readdatavalid -> DUT_rxm_bar4_translator:uav_readdatavalid
	wire          dut_rxm_bar4_translator_avalon_universal_master_0_lock;               // DUT_rxm_bar4_translator:uav_lock -> DUT_rxm_bar4_agent:av_lock
	wire          dut_rxm_bar4_translator_avalon_universal_master_0_write;              // DUT_rxm_bar4_translator:uav_write -> DUT_rxm_bar4_agent:av_write
	wire   [31:0] dut_rxm_bar4_translator_avalon_universal_master_0_writedata;          // DUT_rxm_bar4_translator:uav_writedata -> DUT_rxm_bar4_agent:av_writedata
	wire    [2:0] dut_rxm_bar4_translator_avalon_universal_master_0_burstcount;         // DUT_rxm_bar4_translator:uav_burstcount -> DUT_rxm_bar4_agent:av_burstcount
	wire  [255:0] dma_control_0_rddts_slave_agent_m0_readdata;                          // dma_control_0_RdDTS_slave_translator:uav_readdata -> dma_control_0_RdDTS_slave_agent:m0_readdata
	wire          dma_control_0_rddts_slave_agent_m0_waitrequest;                       // dma_control_0_RdDTS_slave_translator:uav_waitrequest -> dma_control_0_RdDTS_slave_agent:m0_waitrequest
	wire          dma_control_0_rddts_slave_agent_m0_debugaccess;                       // dma_control_0_RdDTS_slave_agent:m0_debugaccess -> dma_control_0_RdDTS_slave_translator:uav_debugaccess
	wire   [63:0] dma_control_0_rddts_slave_agent_m0_address;                           // dma_control_0_RdDTS_slave_agent:m0_address -> dma_control_0_RdDTS_slave_translator:uav_address
	wire   [31:0] dma_control_0_rddts_slave_agent_m0_byteenable;                        // dma_control_0_RdDTS_slave_agent:m0_byteenable -> dma_control_0_RdDTS_slave_translator:uav_byteenable
	wire          dma_control_0_rddts_slave_agent_m0_read;                              // dma_control_0_RdDTS_slave_agent:m0_read -> dma_control_0_RdDTS_slave_translator:uav_read
	wire          dma_control_0_rddts_slave_agent_m0_readdatavalid;                     // dma_control_0_RdDTS_slave_translator:uav_readdatavalid -> dma_control_0_RdDTS_slave_agent:m0_readdatavalid
	wire          dma_control_0_rddts_slave_agent_m0_lock;                              // dma_control_0_RdDTS_slave_agent:m0_lock -> dma_control_0_RdDTS_slave_translator:uav_lock
	wire  [255:0] dma_control_0_rddts_slave_agent_m0_writedata;                         // dma_control_0_RdDTS_slave_agent:m0_writedata -> dma_control_0_RdDTS_slave_translator:uav_writedata
	wire          dma_control_0_rddts_slave_agent_m0_write;                             // dma_control_0_RdDTS_slave_agent:m0_write -> dma_control_0_RdDTS_slave_translator:uav_write
	wire    [9:0] dma_control_0_rddts_slave_agent_m0_burstcount;                        // dma_control_0_RdDTS_slave_agent:m0_burstcount -> dma_control_0_RdDTS_slave_translator:uav_burstcount
	wire          dma_control_0_rddts_slave_agent_rf_source_valid;                      // dma_control_0_RdDTS_slave_agent:rf_source_valid -> dma_control_0_RdDTS_slave_agent_rsp_fifo:in_valid
	wire  [395:0] dma_control_0_rddts_slave_agent_rf_source_data;                       // dma_control_0_RdDTS_slave_agent:rf_source_data -> dma_control_0_RdDTS_slave_agent_rsp_fifo:in_data
	wire          dma_control_0_rddts_slave_agent_rf_source_ready;                      // dma_control_0_RdDTS_slave_agent_rsp_fifo:in_ready -> dma_control_0_RdDTS_slave_agent:rf_source_ready
	wire          dma_control_0_rddts_slave_agent_rf_source_startofpacket;              // dma_control_0_RdDTS_slave_agent:rf_source_startofpacket -> dma_control_0_RdDTS_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_control_0_rddts_slave_agent_rf_source_endofpacket;                // dma_control_0_RdDTS_slave_agent:rf_source_endofpacket -> dma_control_0_RdDTS_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_control_0_rddts_slave_agent_rsp_fifo_out_valid;                   // dma_control_0_RdDTS_slave_agent_rsp_fifo:out_valid -> dma_control_0_RdDTS_slave_agent:rf_sink_valid
	wire  [395:0] dma_control_0_rddts_slave_agent_rsp_fifo_out_data;                    // dma_control_0_RdDTS_slave_agent_rsp_fifo:out_data -> dma_control_0_RdDTS_slave_agent:rf_sink_data
	wire          dma_control_0_rddts_slave_agent_rsp_fifo_out_ready;                   // dma_control_0_RdDTS_slave_agent:rf_sink_ready -> dma_control_0_RdDTS_slave_agent_rsp_fifo:out_ready
	wire          dma_control_0_rddts_slave_agent_rsp_fifo_out_startofpacket;           // dma_control_0_RdDTS_slave_agent_rsp_fifo:out_startofpacket -> dma_control_0_RdDTS_slave_agent:rf_sink_startofpacket
	wire          dma_control_0_rddts_slave_agent_rsp_fifo_out_endofpacket;             // dma_control_0_RdDTS_slave_agent_rsp_fifo:out_endofpacket -> dma_control_0_RdDTS_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> dma_control_0_RdDTS_slave_agent:cp_valid
	wire  [394:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> dma_control_0_RdDTS_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                    // dma_control_0_RdDTS_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> dma_control_0_RdDTS_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> dma_control_0_RdDTS_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> dma_control_0_RdDTS_slave_agent:cp_endofpacket
	wire  [255:0] dma_control_0_wrdts_slave_agent_m0_readdata;                          // dma_control_0_WrDTS_slave_translator:uav_readdata -> dma_control_0_WrDTS_slave_agent:m0_readdata
	wire          dma_control_0_wrdts_slave_agent_m0_waitrequest;                       // dma_control_0_WrDTS_slave_translator:uav_waitrequest -> dma_control_0_WrDTS_slave_agent:m0_waitrequest
	wire          dma_control_0_wrdts_slave_agent_m0_debugaccess;                       // dma_control_0_WrDTS_slave_agent:m0_debugaccess -> dma_control_0_WrDTS_slave_translator:uav_debugaccess
	wire   [63:0] dma_control_0_wrdts_slave_agent_m0_address;                           // dma_control_0_WrDTS_slave_agent:m0_address -> dma_control_0_WrDTS_slave_translator:uav_address
	wire   [31:0] dma_control_0_wrdts_slave_agent_m0_byteenable;                        // dma_control_0_WrDTS_slave_agent:m0_byteenable -> dma_control_0_WrDTS_slave_translator:uav_byteenable
	wire          dma_control_0_wrdts_slave_agent_m0_read;                              // dma_control_0_WrDTS_slave_agent:m0_read -> dma_control_0_WrDTS_slave_translator:uav_read
	wire          dma_control_0_wrdts_slave_agent_m0_readdatavalid;                     // dma_control_0_WrDTS_slave_translator:uav_readdatavalid -> dma_control_0_WrDTS_slave_agent:m0_readdatavalid
	wire          dma_control_0_wrdts_slave_agent_m0_lock;                              // dma_control_0_WrDTS_slave_agent:m0_lock -> dma_control_0_WrDTS_slave_translator:uav_lock
	wire  [255:0] dma_control_0_wrdts_slave_agent_m0_writedata;                         // dma_control_0_WrDTS_slave_agent:m0_writedata -> dma_control_0_WrDTS_slave_translator:uav_writedata
	wire          dma_control_0_wrdts_slave_agent_m0_write;                             // dma_control_0_WrDTS_slave_agent:m0_write -> dma_control_0_WrDTS_slave_translator:uav_write
	wire    [9:0] dma_control_0_wrdts_slave_agent_m0_burstcount;                        // dma_control_0_WrDTS_slave_agent:m0_burstcount -> dma_control_0_WrDTS_slave_translator:uav_burstcount
	wire          dma_control_0_wrdts_slave_agent_rf_source_valid;                      // dma_control_0_WrDTS_slave_agent:rf_source_valid -> dma_control_0_WrDTS_slave_agent_rsp_fifo:in_valid
	wire  [395:0] dma_control_0_wrdts_slave_agent_rf_source_data;                       // dma_control_0_WrDTS_slave_agent:rf_source_data -> dma_control_0_WrDTS_slave_agent_rsp_fifo:in_data
	wire          dma_control_0_wrdts_slave_agent_rf_source_ready;                      // dma_control_0_WrDTS_slave_agent_rsp_fifo:in_ready -> dma_control_0_WrDTS_slave_agent:rf_source_ready
	wire          dma_control_0_wrdts_slave_agent_rf_source_startofpacket;              // dma_control_0_WrDTS_slave_agent:rf_source_startofpacket -> dma_control_0_WrDTS_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_control_0_wrdts_slave_agent_rf_source_endofpacket;                // dma_control_0_WrDTS_slave_agent:rf_source_endofpacket -> dma_control_0_WrDTS_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_control_0_wrdts_slave_agent_rsp_fifo_out_valid;                   // dma_control_0_WrDTS_slave_agent_rsp_fifo:out_valid -> dma_control_0_WrDTS_slave_agent:rf_sink_valid
	wire  [395:0] dma_control_0_wrdts_slave_agent_rsp_fifo_out_data;                    // dma_control_0_WrDTS_slave_agent_rsp_fifo:out_data -> dma_control_0_WrDTS_slave_agent:rf_sink_data
	wire          dma_control_0_wrdts_slave_agent_rsp_fifo_out_ready;                   // dma_control_0_WrDTS_slave_agent:rf_sink_ready -> dma_control_0_WrDTS_slave_agent_rsp_fifo:out_ready
	wire          dma_control_0_wrdts_slave_agent_rsp_fifo_out_startofpacket;           // dma_control_0_WrDTS_slave_agent_rsp_fifo:out_startofpacket -> dma_control_0_WrDTS_slave_agent:rf_sink_startofpacket
	wire          dma_control_0_wrdts_slave_agent_rsp_fifo_out_endofpacket;             // dma_control_0_WrDTS_slave_agent_rsp_fifo:out_endofpacket -> dma_control_0_WrDTS_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                // cmd_mux_001:src_valid -> dma_control_0_WrDTS_slave_agent:cp_valid
	wire  [394:0] cmd_mux_001_src_data;                                                 // cmd_mux_001:src_data -> dma_control_0_WrDTS_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                // dma_control_0_WrDTS_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                              // cmd_mux_001:src_channel -> dma_control_0_WrDTS_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                        // cmd_mux_001:src_startofpacket -> dma_control_0_WrDTS_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                          // cmd_mux_001:src_endofpacket -> dma_control_0_WrDTS_slave_agent:cp_endofpacket
	wire  [255:0] onchip_memory2_0_s1_agent_m0_readdata;                                // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                             // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                             // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [63:0] onchip_memory2_0_s1_agent_m0_address;                                 // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire   [31:0] onchip_memory2_0_s1_agent_m0_byteenable;                              // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                    // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                           // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                    // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire  [255:0] onchip_memory2_0_s1_agent_m0_writedata;                               // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                   // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [5:0] onchip_memory2_0_s1_agent_m0_burstcount;                              // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                            // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [395:0] onchip_memory2_0_s1_agent_rf_source_data;                             // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                            // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                    // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                      // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                         // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [395:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                          // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                         // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                 // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                   // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          dut_dma_rd_master_agent_cp_valid;                                     // DUT_dma_rd_master_agent:cp_valid -> router:sink_valid
	wire  [394:0] dut_dma_rd_master_agent_cp_data;                                      // DUT_dma_rd_master_agent:cp_data -> router:sink_data
	wire          dut_dma_rd_master_agent_cp_ready;                                     // router:sink_ready -> DUT_dma_rd_master_agent:cp_ready
	wire          dut_dma_rd_master_agent_cp_startofpacket;                             // DUT_dma_rd_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dut_dma_rd_master_agent_cp_endofpacket;                               // DUT_dma_rd_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                     // router:src_valid -> cmd_demux:sink_valid
	wire  [394:0] router_src_data;                                                      // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                     // cmd_demux:sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                   // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                             // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                               // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          dut_rxm_bar4_agent_cp_valid;                                          // DUT_rxm_bar4_agent:cp_valid -> router_001:sink_valid
	wire  [142:0] dut_rxm_bar4_agent_cp_data;                                           // DUT_rxm_bar4_agent:cp_data -> router_001:sink_data
	wire          dut_rxm_bar4_agent_cp_ready;                                          // router_001:sink_ready -> DUT_rxm_bar4_agent:cp_ready
	wire          dut_rxm_bar4_agent_cp_startofpacket;                                  // DUT_rxm_bar4_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          dut_rxm_bar4_agent_cp_endofpacket;                                    // DUT_rxm_bar4_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          dma_control_0_rddts_slave_agent_rp_valid;                             // dma_control_0_RdDTS_slave_agent:rp_valid -> router_002:sink_valid
	wire  [394:0] dma_control_0_rddts_slave_agent_rp_data;                              // dma_control_0_RdDTS_slave_agent:rp_data -> router_002:sink_data
	wire          dma_control_0_rddts_slave_agent_rp_ready;                             // router_002:sink_ready -> dma_control_0_RdDTS_slave_agent:rp_ready
	wire          dma_control_0_rddts_slave_agent_rp_startofpacket;                     // dma_control_0_RdDTS_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          dma_control_0_rddts_slave_agent_rp_endofpacket;                       // dma_control_0_RdDTS_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                 // router_002:src_valid -> rsp_demux:sink_valid
	wire  [394:0] router_002_src_data;                                                  // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                 // rsp_demux:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                               // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                         // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                           // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          dma_control_0_wrdts_slave_agent_rp_valid;                             // dma_control_0_WrDTS_slave_agent:rp_valid -> router_003:sink_valid
	wire  [394:0] dma_control_0_wrdts_slave_agent_rp_data;                              // dma_control_0_WrDTS_slave_agent:rp_data -> router_003:sink_data
	wire          dma_control_0_wrdts_slave_agent_rp_ready;                             // router_003:sink_ready -> dma_control_0_WrDTS_slave_agent:rp_ready
	wire          dma_control_0_wrdts_slave_agent_rp_startofpacket;                     // dma_control_0_WrDTS_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          dma_control_0_wrdts_slave_agent_rp_endofpacket;                       // dma_control_0_WrDTS_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                 // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [394:0] router_003_src_data;                                                  // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                 // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                               // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                         // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                           // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                   // onchip_memory2_0_s1_agent:rp_valid -> router_004:sink_valid
	wire  [394:0] onchip_memory2_0_s1_agent_rp_data;                                    // onchip_memory2_0_s1_agent:rp_data -> router_004:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                   // router_004:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                           // onchip_memory2_0_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                             // onchip_memory2_0_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                 // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [394:0] router_004_src_data;                                                  // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                 // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                               // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                         // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                           // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                // cmd_mux_002:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [394:0] cmd_mux_002_src_data;                                                 // cmd_mux_002:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                              // cmd_mux_002:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                        // cmd_mux_002:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                          // cmd_mux_002:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                      // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [394:0] onchip_memory2_0_s1_burst_adapter_source0_data;                       // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                      // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [2:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                    // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;              // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [394:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [394:0] cmd_demux_src1_data;                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [394:0] cmd_demux_src2_data;                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                             // cmd_demux_001:src0_valid -> cmd_mux_002:sink1_valid
	wire  [394:0] cmd_demux_001_src0_data;                                              // cmd_demux_001:src0_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src0_ready;                                             // cmd_mux_002:sink1_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                           // cmd_demux_001:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                     // cmd_demux_001:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                       // cmd_demux_001:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [394:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [394:0] rsp_demux_001_src0_data;                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [394:0] rsp_demux_002_src0_data;                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                             // rsp_demux_002:src1_valid -> rsp_mux_001:sink0_valid
	wire  [394:0] rsp_demux_002_src1_data;                                              // rsp_demux_002:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_002_src1_ready;                                             // rsp_mux_001:sink0_ready -> rsp_demux_002:src1_ready
	wire    [2:0] rsp_demux_002_src1_channel;                                           // rsp_demux_002:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_002_src1_startofpacket;                                     // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                       // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_mux_001_src_valid;                                                // rsp_mux_001:src_valid -> DUT_rxm_bar4_rsp_width_adapter:in_valid
	wire  [394:0] rsp_mux_001_src_data;                                                 // rsp_mux_001:src_data -> DUT_rxm_bar4_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                                // DUT_rxm_bar4_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                              // rsp_mux_001:src_channel -> DUT_rxm_bar4_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                        // rsp_mux_001:src_startofpacket -> DUT_rxm_bar4_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                          // rsp_mux_001:src_endofpacket -> DUT_rxm_bar4_rsp_width_adapter:in_endofpacket
	wire          dut_rxm_bar4_rsp_width_adapter_src_valid;                             // DUT_rxm_bar4_rsp_width_adapter:out_valid -> DUT_rxm_bar4_agent:rp_valid
	wire  [142:0] dut_rxm_bar4_rsp_width_adapter_src_data;                              // DUT_rxm_bar4_rsp_width_adapter:out_data -> DUT_rxm_bar4_agent:rp_data
	wire          dut_rxm_bar4_rsp_width_adapter_src_ready;                             // DUT_rxm_bar4_agent:rp_ready -> DUT_rxm_bar4_rsp_width_adapter:out_ready
	wire    [2:0] dut_rxm_bar4_rsp_width_adapter_src_channel;                           // DUT_rxm_bar4_rsp_width_adapter:out_channel -> DUT_rxm_bar4_agent:rp_channel
	wire          dut_rxm_bar4_rsp_width_adapter_src_startofpacket;                     // DUT_rxm_bar4_rsp_width_adapter:out_startofpacket -> DUT_rxm_bar4_agent:rp_startofpacket
	wire          dut_rxm_bar4_rsp_width_adapter_src_endofpacket;                       // DUT_rxm_bar4_rsp_width_adapter:out_endofpacket -> DUT_rxm_bar4_agent:rp_endofpacket
	wire          router_001_src_valid;                                                 // router_001:src_valid -> DUT_rxm_bar4_cmd_width_adapter:in_valid
	wire  [142:0] router_001_src_data;                                                  // router_001:src_data -> DUT_rxm_bar4_cmd_width_adapter:in_data
	wire          router_001_src_ready;                                                 // DUT_rxm_bar4_cmd_width_adapter:in_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                               // router_001:src_channel -> DUT_rxm_bar4_cmd_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                         // router_001:src_startofpacket -> DUT_rxm_bar4_cmd_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                           // router_001:src_endofpacket -> DUT_rxm_bar4_cmd_width_adapter:in_endofpacket
	wire          dut_rxm_bar4_cmd_width_adapter_src_valid;                             // DUT_rxm_bar4_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [394:0] dut_rxm_bar4_cmd_width_adapter_src_data;                              // DUT_rxm_bar4_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          dut_rxm_bar4_cmd_width_adapter_src_ready;                             // cmd_demux_001:sink_ready -> DUT_rxm_bar4_cmd_width_adapter:out_ready
	wire    [2:0] dut_rxm_bar4_cmd_width_adapter_src_channel;                           // DUT_rxm_bar4_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          dut_rxm_bar4_cmd_width_adapter_src_startofpacket;                     // DUT_rxm_bar4_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          dut_rxm_bar4_cmd_width_adapter_src_endofpacket;                       // DUT_rxm_bar4_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          dma_control_0_rddts_slave_agent_rdata_fifo_src_valid;                 // dma_control_0_RdDTS_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] dma_control_0_rddts_slave_agent_rdata_fifo_src_data;                  // dma_control_0_RdDTS_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          dma_control_0_rddts_slave_agent_rdata_fifo_src_ready;                 // avalon_st_adapter:in_0_ready -> dma_control_0_RdDTS_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                        // avalon_st_adapter:out_0_valid -> dma_control_0_RdDTS_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                         // avalon_st_adapter:out_0_data -> dma_control_0_RdDTS_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                        // dma_control_0_RdDTS_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                        // avalon_st_adapter:out_0_error -> dma_control_0_RdDTS_slave_agent:rdata_fifo_sink_error
	wire          dma_control_0_wrdts_slave_agent_rdata_fifo_src_valid;                 // dma_control_0_WrDTS_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [257:0] dma_control_0_wrdts_slave_agent_rdata_fifo_src_data;                  // dma_control_0_WrDTS_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          dma_control_0_wrdts_slave_agent_rdata_fifo_src_ready;                 // avalon_st_adapter_001:in_0_ready -> dma_control_0_WrDTS_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                    // avalon_st_adapter_001:out_0_valid -> dma_control_0_WrDTS_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_001_out_0_data;                                     // avalon_st_adapter_001:out_0_data -> dma_control_0_WrDTS_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                    // dma_control_0_WrDTS_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                    // avalon_st_adapter_001:out_0_error -> dma_control_0_WrDTS_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                       // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [257:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                        // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                       // avalon_st_adapter_002:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                    // avalon_st_adapter_002:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_002_out_0_data;                                     // avalon_st_adapter_002:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                    // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                    // avalon_st_adapter_002:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dut_dma_rd_master_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                               //   input,    width = 1,                       clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  //   input,    width = 1,                     reset.reset
		.uav_address            (dut_dma_rd_master_translator_avalon_universal_master_0_address),       //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (dut_dma_rd_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 10,                          .burstcount
		.uav_read               (dut_dma_rd_master_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (dut_dma_rd_master_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (dut_dma_rd_master_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (dut_dma_rd_master_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (dut_dma_rd_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 32,                          .byteenable
		.uav_readdata           (dut_dma_rd_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 256,                          .readdata
		.uav_writedata          (dut_dma_rd_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 256,                          .writedata
		.uav_lock               (dut_dma_rd_master_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (dut_dma_rd_master_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (DUT_dma_rd_master_address),                                            //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (DUT_dma_rd_master_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (DUT_dma_rd_master_burstcount),                                         //   input,    width = 5,                          .burstcount
		.av_byteenable          (DUT_dma_rd_master_byteenable),                                         //   input,   width = 32,                          .byteenable
		.av_write               (DUT_dma_rd_master_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (DUT_dma_rd_master_writedata),                                          //   input,  width = 256,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                 // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                 // (terminated),                                         
		.av_chipselect          (1'b0),                                                                 // (terminated),                                         
		.av_read                (1'b0),                                                                 // (terminated),                                         
		.av_readdata            (),                                                                     // (terminated),                                         
		.av_readdatavalid       (),                                                                     // (terminated),                                         
		.av_lock                (1'b0),                                                                 // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                 // (terminated),                                         
		.uav_clken              (),                                                                     // (terminated),                                         
		.av_clken               (1'b1),                                                                 // (terminated),                                         
		.uav_response           (2'b00),                                                                // (terminated),                                         
		.av_response            (),                                                                     // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                 // (terminated),                                         
		.av_writeresponsevalid  ()                                                                      // (terminated),                                         
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dut_rxm_bar4_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                          //   input,   width = 1,                       clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             //   input,   width = 1,                     reset.reset
		.uav_address            (dut_rxm_bar4_translator_avalon_universal_master_0_address),       //  output,  width = 64, avalon_universal_master_0.address
		.uav_burstcount         (dut_rxm_bar4_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (dut_rxm_bar4_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (dut_rxm_bar4_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (dut_rxm_bar4_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (dut_rxm_bar4_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (dut_rxm_bar4_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (dut_rxm_bar4_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (dut_rxm_bar4_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (dut_rxm_bar4_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (dut_rxm_bar4_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (DUT_rxm_bar4_address),                                            //   input,  width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (DUT_rxm_bar4_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (DUT_rxm_bar4_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (DUT_rxm_bar4_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (DUT_rxm_bar4_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (DUT_rxm_bar4_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (DUT_rxm_bar4_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (DUT_rxm_bar4_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                            // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                            // (terminated),                                        
		.av_begintransfer       (1'b0),                                                            // (terminated),                                        
		.av_chipselect          (1'b0),                                                            // (terminated),                                        
		.av_lock                (1'b0),                                                            // (terminated),                                        
		.av_debugaccess         (1'b0),                                                            // (terminated),                                        
		.uav_clken              (),                                                                // (terminated),                                        
		.av_clken               (1'b1),                                                            // (terminated),                                        
		.uav_response           (2'b00),                                                           // (terminated),                                        
		.av_response            (),                                                                // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                            // (terminated),                                        
		.av_writeresponsevalid  ()                                                                 // (terminated),                                        
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_control_0_rddts_slave_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                                                                                                                                                                                                                                //   input,    width = 1,                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                                                                                                                                                                                                   //   input,    width = 1,                    reset.reset
		.uav_address            (dma_control_0_rddts_slave_agent_m0_address),                                                                                                                                                                                                                            //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (dma_control_0_rddts_slave_agent_m0_burstcount),                                                                                                                                                                                                                         //   input,   width = 10,                         .burstcount
		.uav_read               (dma_control_0_rddts_slave_agent_m0_read),                                                                                                                                                                                                                               //   input,    width = 1,                         .read
		.uav_write              (dma_control_0_rddts_slave_agent_m0_write),                                                                                                                                                                                                                              //   input,    width = 1,                         .write
		.uav_waitrequest        (dma_control_0_rddts_slave_agent_m0_waitrequest),                                                                                                                                                                                                                        //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (dma_control_0_rddts_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                      //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (dma_control_0_rddts_slave_agent_m0_byteenable),                                                                                                                                                                                                                         //   input,   width = 32,                         .byteenable
		.uav_readdata           (dma_control_0_rddts_slave_agent_m0_readdata),                                                                                                                                                                                                                           //  output,  width = 256,                         .readdata
		.uav_writedata          (dma_control_0_rddts_slave_agent_m0_writedata),                                                                                                                                                                                                                          //   input,  width = 256,                         .writedata
		.uav_lock               (dma_control_0_rddts_slave_agent_m0_lock),                                                                                                                                                                                                                               //   input,    width = 1,                         .lock
		.uav_debugaccess        (dma_control_0_rddts_slave_agent_m0_debugaccess),                                                                                                                                                                                                                        //   input,    width = 1,                         .debugaccess
		.av_address             (dma_control_0_RdDTS_slave_address),                                                                                                                                                                                                                                     //  output,    width = 8,      avalon_anti_slave_0.address
		.av_write               (dma_control_0_RdDTS_slave_write),                                                                                                                                                                                                                                       //  output,    width = 1,                         .write
		.av_writedata           (dma_control_0_RdDTS_slave_writedata),                                                                                                                                                                                                                                   //  output,  width = 256,                         .writedata
		.av_burstcount          (dma_control_0_RdDTS_slave_burstcount),                                                                                                                                                                                                                                  //  output,    width = 5,                         .burstcount
		.av_waitrequest         (dma_control_0_RdDTS_slave_waitrequest),                                                                                                                                                                                                                                 //   input,    width = 1,                         .waitrequest
		.av_chipselect          (dma_control_0_RdDTS_slave_chipselect),                                                                                                                                                                                                                                  //  output,    width = 1,                         .chipselect
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_byteenable          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_control_0_wrdts_slave_translator (
		.clk                    (DUT_coreclkout_hip_clk),                                                                                                                                                                                                                                                //   input,    width = 1,                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                                                                                                                                                                                                   //   input,    width = 1,                    reset.reset
		.uav_address            (dma_control_0_wrdts_slave_agent_m0_address),                                                                                                                                                                                                                            //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (dma_control_0_wrdts_slave_agent_m0_burstcount),                                                                                                                                                                                                                         //   input,   width = 10,                         .burstcount
		.uav_read               (dma_control_0_wrdts_slave_agent_m0_read),                                                                                                                                                                                                                               //   input,    width = 1,                         .read
		.uav_write              (dma_control_0_wrdts_slave_agent_m0_write),                                                                                                                                                                                                                              //   input,    width = 1,                         .write
		.uav_waitrequest        (dma_control_0_wrdts_slave_agent_m0_waitrequest),                                                                                                                                                                                                                        //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (dma_control_0_wrdts_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                      //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (dma_control_0_wrdts_slave_agent_m0_byteenable),                                                                                                                                                                                                                         //   input,   width = 32,                         .byteenable
		.uav_readdata           (dma_control_0_wrdts_slave_agent_m0_readdata),                                                                                                                                                                                                                           //  output,  width = 256,                         .readdata
		.uav_writedata          (dma_control_0_wrdts_slave_agent_m0_writedata),                                                                                                                                                                                                                          //   input,  width = 256,                         .writedata
		.uav_lock               (dma_control_0_wrdts_slave_agent_m0_lock),                                                                                                                                                                                                                               //   input,    width = 1,                         .lock
		.uav_debugaccess        (dma_control_0_wrdts_slave_agent_m0_debugaccess),                                                                                                                                                                                                                        //   input,    width = 1,                         .debugaccess
		.av_address             (dma_control_0_WrDTS_slave_address),                                                                                                                                                                                                                                     //  output,    width = 8,      avalon_anti_slave_0.address
		.av_write               (dma_control_0_WrDTS_slave_write),                                                                                                                                                                                                                                       //  output,    width = 1,                         .write
		.av_writedata           (dma_control_0_WrDTS_slave_writedata),                                                                                                                                                                                                                                   //  output,  width = 256,                         .writedata
		.av_burstcount          (dma_control_0_WrDTS_slave_burstcount),                                                                                                                                                                                                                                  //  output,    width = 5,                         .burstcount
		.av_waitrequest         (dma_control_0_WrDTS_slave_waitrequest),                                                                                                                                                                                                                                 //   input,    width = 1,                         .waitrequest
		.av_chipselect          (dma_control_0_WrDTS_slave_chipselect),                                                                                                                                                                                                                                  //  output,    width = 1,                         .chipselect
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_byteenable          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (DUT_coreclkout_hip_clk),                              //   input,    width = 1,                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),             //   input,    width = 6,                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                   //   input,    width = 1,                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                  //   input,    width = 1,                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),            //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),          //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),             //   input,   width = 32,                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),               //  output,  width = 256,                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),              //   input,  width = 256,                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                   //   input,    width = 1,                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),            //   input,    width = 1,                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                         //  output,   width = 10,      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                           //  output,    width = 1,                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                        //   input,  width = 256,                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                       //  output,  width = 256,                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                      //  output,   width = 32,                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                      //  output,    width = 1,                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                           //  output,    width = 1,                         .clken
		.av_read                (),                                                    // (terminated),                                        
		.av_begintransfer       (),                                                    // (terminated),                                        
		.av_beginbursttransfer  (),                                                    // (terminated),                                        
		.av_burstcount          (),                                                    // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                // (terminated),                                        
		.av_waitrequest         (1'b0),                                                // (terminated),                                        
		.av_writebyteenable     (),                                                    // (terminated),                                        
		.av_lock                (),                                                    // (terminated),                                        
		.uav_clken              (1'b0),                                                // (terminated),                                        
		.av_debugaccess         (),                                                    // (terminated),                                        
		.av_outputenable        (),                                                    // (terminated),                                        
		.uav_response           (),                                                    // (terminated),                                        
		.av_response            (2'b00),                                               // (terminated),                                        
		.uav_writeresponsevalid (),                                                    // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                 // (terminated),                                        
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_QOS_H                 (377),
		.PKT_QOS_L                 (377),
		.PKT_DATA_SIDEBAND_H       (375),
		.PKT_DATA_SIDEBAND_L       (375),
		.PKT_ADDR_SIDEBAND_H       (374),
		.PKT_ADDR_SIDEBAND_L       (374),
		.PKT_BURST_TYPE_H          (373),
		.PKT_BURST_TYPE_L          (372),
		.PKT_CACHE_H               (389),
		.PKT_CACHE_L               (386),
		.PKT_THREAD_ID_H           (382),
		.PKT_THREAD_ID_L           (382),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (379),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (380),
		.ST_DATA_W                 (395),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dut_dma_rd_master_agent (
		.clk                   (DUT_coreclkout_hip_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.av_address            (dut_dma_rd_master_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (dut_dma_rd_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dut_dma_rd_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dut_dma_rd_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (dut_dma_rd_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (dut_dma_rd_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dut_dma_rd_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dut_dma_rd_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (dut_dma_rd_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (dut_dma_rd_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dut_dma_rd_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dut_dma_rd_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dut_dma_rd_master_agent_cp_data),                                      //  output,  width = 395,          .data
		.cp_startofpacket      (dut_dma_rd_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dut_dma_rd_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dut_dma_rd_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                    //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                     //   input,  width = 395,          .data
		.rp_channel            (rsp_mux_src_channel),                                                  //   input,    width = 3,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                    //  output,    width = 1,          .ready
		.av_response           (),                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                      // (terminated),                         
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_QOS_H                 (125),
		.PKT_QOS_L                 (125),
		.PKT_DATA_SIDEBAND_H       (123),
		.PKT_DATA_SIDEBAND_L       (123),
		.PKT_ADDR_SIDEBAND_H       (122),
		.PKT_ADDR_SIDEBAND_L       (122),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_CACHE_H               (137),
		.PKT_CACHE_L               (134),
		.PKT_THREAD_ID_H           (130),
		.PKT_THREAD_ID_L           (130),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_EXCLUSIVE       (105),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (128),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dut_rxm_bar4_agent (
		.clk                   (DUT_coreclkout_hip_clk),                                          //   input,    width = 1,       clk.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.av_address            (dut_rxm_bar4_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (dut_rxm_bar4_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dut_rxm_bar4_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dut_rxm_bar4_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (dut_rxm_bar4_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (dut_rxm_bar4_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dut_rxm_bar4_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dut_rxm_bar4_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (dut_rxm_bar4_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (dut_rxm_bar4_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dut_rxm_bar4_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dut_rxm_bar4_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dut_rxm_bar4_agent_cp_data),                                      //  output,  width = 143,          .data
		.cp_startofpacket      (dut_rxm_bar4_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dut_rxm_bar4_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dut_rxm_bar4_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (dut_rxm_bar4_rsp_width_adapter_src_valid),                        //   input,    width = 1,        rp.valid
		.rp_data               (dut_rxm_bar4_rsp_width_adapter_src_data),                         //   input,  width = 143,          .data
		.rp_channel            (dut_rxm_bar4_rsp_width_adapter_src_channel),                      //   input,    width = 3,          .channel
		.rp_startofpacket      (dut_rxm_bar4_rsp_width_adapter_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (dut_rxm_bar4_rsp_width_adapter_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.rp_ready              (dut_rxm_bar4_rsp_width_adapter_src_ready),                        //  output,    width = 1,          .ready
		.av_response           (),                                                                // (terminated),                         
		.av_writeresponsevalid ()                                                                 // (terminated),                         
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (379),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (380),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (395),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_control_0_rddts_slave_agent (
		.clk                     (DUT_coreclkout_hip_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        //   input,    width = 1,       clk_reset.reset
		.m0_address              (dma_control_0_rddts_slave_agent_m0_address),                 //  output,   width = 64,              m0.address
		.m0_burstcount           (dma_control_0_rddts_slave_agent_m0_burstcount),              //  output,   width = 10,                .burstcount
		.m0_byteenable           (dma_control_0_rddts_slave_agent_m0_byteenable),              //  output,   width = 32,                .byteenable
		.m0_debugaccess          (dma_control_0_rddts_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (dma_control_0_rddts_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (dma_control_0_rddts_slave_agent_m0_readdata),                //   input,  width = 256,                .readdata
		.m0_readdatavalid        (dma_control_0_rddts_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (dma_control_0_rddts_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (dma_control_0_rddts_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (dma_control_0_rddts_slave_agent_m0_writedata),               //  output,  width = 256,                .writedata
		.m0_write                (dma_control_0_rddts_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (dma_control_0_rddts_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dma_control_0_rddts_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (dma_control_0_rddts_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (dma_control_0_rddts_slave_agent_rp_data),                    //  output,  width = 395,                .data
		.rp_startofpacket        (dma_control_0_rddts_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                           //   input,  width = 395,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                        //   input,    width = 3,                .channel
		.rf_sink_ready           (dma_control_0_rddts_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dma_control_0_rddts_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dma_control_0_rddts_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dma_control_0_rddts_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dma_control_0_rddts_slave_agent_rsp_fifo_out_data),          //   input,  width = 396,                .data
		.rf_source_ready         (dma_control_0_rddts_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dma_control_0_rddts_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (dma_control_0_rddts_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dma_control_0_rddts_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (dma_control_0_rddts_slave_agent_rf_source_data),             //  output,  width = 396,                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //   input,  width = 258,                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //   input,    width = 1,                .error
		.rdata_fifo_src_ready    (dma_control_0_rddts_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_control_0_rddts_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dma_control_0_rddts_slave_agent_rdata_fifo_src_data),        //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0)                                                        // (terminated),                               
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (396),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_control_0_rddts_slave_agent_rsp_fifo (
		.clk               (DUT_coreclkout_hip_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_data           (dma_control_0_rddts_slave_agent_rf_source_data),             //   input,  width = 396,        in.data
		.in_valid          (dma_control_0_rddts_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (dma_control_0_rddts_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (dma_control_0_rddts_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dma_control_0_rddts_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (dma_control_0_rddts_slave_agent_rsp_fifo_out_data),          //  output,  width = 396,       out.data
		.out_valid         (dma_control_0_rddts_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (dma_control_0_rddts_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (dma_control_0_rddts_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dma_control_0_rddts_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (379),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (380),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (395),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_control_0_wrdts_slave_agent (
		.clk                     (DUT_coreclkout_hip_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        //   input,    width = 1,       clk_reset.reset
		.m0_address              (dma_control_0_wrdts_slave_agent_m0_address),                 //  output,   width = 64,              m0.address
		.m0_burstcount           (dma_control_0_wrdts_slave_agent_m0_burstcount),              //  output,   width = 10,                .burstcount
		.m0_byteenable           (dma_control_0_wrdts_slave_agent_m0_byteenable),              //  output,   width = 32,                .byteenable
		.m0_debugaccess          (dma_control_0_wrdts_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (dma_control_0_wrdts_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (dma_control_0_wrdts_slave_agent_m0_readdata),                //   input,  width = 256,                .readdata
		.m0_readdatavalid        (dma_control_0_wrdts_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (dma_control_0_wrdts_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (dma_control_0_wrdts_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (dma_control_0_wrdts_slave_agent_m0_writedata),               //  output,  width = 256,                .writedata
		.m0_write                (dma_control_0_wrdts_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (dma_control_0_wrdts_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dma_control_0_wrdts_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (dma_control_0_wrdts_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (dma_control_0_wrdts_slave_agent_rp_data),                    //  output,  width = 395,                .data
		.rp_startofpacket        (dma_control_0_wrdts_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                      //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                      //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                       //   input,  width = 395,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                    //   input,    width = 3,                .channel
		.rf_sink_ready           (dma_control_0_wrdts_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dma_control_0_wrdts_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dma_control_0_wrdts_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dma_control_0_wrdts_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dma_control_0_wrdts_slave_agent_rsp_fifo_out_data),          //   input,  width = 396,                .data
		.rf_source_ready         (dma_control_0_wrdts_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dma_control_0_wrdts_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (dma_control_0_wrdts_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dma_control_0_wrdts_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (dma_control_0_wrdts_slave_agent_rf_source_data),             //  output,  width = 396,                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                           //   input,  width = 258,                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                          //   input,    width = 1,                .error
		.rdata_fifo_src_ready    (dma_control_0_wrdts_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_control_0_wrdts_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dma_control_0_wrdts_slave_agent_rdata_fifo_src_data),        //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0)                                                        // (terminated),                               
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (396),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_control_0_wrdts_slave_agent_rsp_fifo (
		.clk               (DUT_coreclkout_hip_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_data           (dma_control_0_wrdts_slave_agent_rf_source_data),             //   input,  width = 396,        in.data
		.in_valid          (dma_control_0_wrdts_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (dma_control_0_wrdts_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (dma_control_0_wrdts_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dma_control_0_wrdts_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (dma_control_0_wrdts_slave_agent_rsp_fifo_out_data),          //  output,  width = 396,       out.data
		.out_valid         (dma_control_0_wrdts_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (dma_control_0_wrdts_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (dma_control_0_wrdts_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dma_control_0_wrdts_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (379),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (380),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (395),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (DUT_coreclkout_hip_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //  output,   width = 64,              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //  output,    width = 6,                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //  output,   width = 32,                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //   input,  width = 256,                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //  output,  width = 256,                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //  output,  width = 395,                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //   input,  width = 395,                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //   input,    width = 3,                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //   input,  width = 396,                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //  output,  width = 396,                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                        //   input,  width = 258,                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                       //   input,    width = 1,                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0)                                                     // (terminated),                               
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (396),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (DUT_coreclkout_hip_clk),                               //   input,    width = 1,       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //   input,  width = 396,        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //  output,  width = 396,       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	ep_g3x8_avmm256_altera_merlin_router_171_gwxgora router (
		.sink_ready         (dut_dma_rd_master_agent_cp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (dut_dma_rd_master_agent_cp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (dut_dma_rd_master_agent_cp_data),                     //   input,  width = 395,          .data
		.sink_startofpacket (dut_dma_rd_master_agent_cp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dut_dma_rd_master_agent_cp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                     //  output,  width = 395,          .data
		.src_channel        (router_src_channel),                                  //  output,    width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_router_171_g6qpmsi router_001 (
		.sink_ready         (dut_rxm_bar4_agent_cp_ready),                         //  output,    width = 1,      sink.ready
		.sink_valid         (dut_rxm_bar4_agent_cp_valid),                         //   input,    width = 1,          .valid
		.sink_data          (dut_rxm_bar4_agent_cp_data),                          //   input,  width = 143,          .data
		.sink_startofpacket (dut_rxm_bar4_agent_cp_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dut_rxm_bar4_agent_cp_endofpacket),                   //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                 //  output,  width = 143,          .data
		.src_channel        (router_001_src_channel),                              //  output,    width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_router_171_tdiu6gq router_002 (
		.sink_ready         (dma_control_0_rddts_slave_agent_rp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (dma_control_0_rddts_slave_agent_rp_valid),            //   input,    width = 1,          .valid
		.sink_data          (dma_control_0_rddts_slave_agent_rp_data),             //   input,  width = 395,          .data
		.sink_startofpacket (dma_control_0_rddts_slave_agent_rp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_control_0_rddts_slave_agent_rp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                 //  output,  width = 395,          .data
		.src_channel        (router_002_src_channel),                              //  output,    width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_router_171_tdiu6gq router_003 (
		.sink_ready         (dma_control_0_wrdts_slave_agent_rp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (dma_control_0_wrdts_slave_agent_rp_valid),            //   input,    width = 1,          .valid
		.sink_data          (dma_control_0_wrdts_slave_agent_rp_data),             //   input,  width = 395,          .data
		.sink_startofpacket (dma_control_0_wrdts_slave_agent_rp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_control_0_wrdts_slave_agent_rp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                 //  output,  width = 395,          .data
		.src_channel        (router_003_src_channel),                              //  output,    width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_router_171_ts3z7ji router_004 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                   //   input,  width = 395,          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                 //  output,  width = 395,          .data
		.src_channel        (router_004_src_channel),                              //  output,    width = 3,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (376),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_BURST_TYPE_H          (373),
		.PKT_BURST_TYPE_L          (372),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (395),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (363),
		.OUT_BURSTWRAP_H           (368),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (DUT_coreclkout_hip_clk),                                  //   input,    width = 1,       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                   //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                    //   input,  width = 395,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                 //   input,    width = 3,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                   //  output,    width = 1,          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //  output,  width = 395,          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //  output,    width = 3,          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	ep_g3x8_avmm256_altera_merlin_demultiplexer_171_eqvhaxq cmd_demux (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                  //   input,    width = 3,          .channel
		.sink_data          (router_src_data),                                     //   input,  width = 395,          .data
		.sink_startofpacket (router_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                 //  output,  width = 395,          .data
		.src0_channel       (cmd_demux_src0_channel),                              //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                          //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                 //  output,  width = 395,          .data
		.src1_channel       (cmd_demux_src1_channel),                              //  output,    width = 3,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                          //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                                 //  output,  width = 395,          .data
		.src2_channel       (cmd_demux_src2_channel),                              //  output,    width = 3,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_demultiplexer_171_uehjzdy cmd_demux_001 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (dut_rxm_bar4_cmd_width_adapter_src_ready),            //  output,    width = 1,      sink.ready
		.sink_channel       (dut_rxm_bar4_cmd_width_adapter_src_channel),          //   input,    width = 3,          .channel
		.sink_data          (dut_rxm_bar4_cmd_width_adapter_src_data),             //   input,  width = 395,          .data
		.sink_startofpacket (dut_rxm_bar4_cmd_width_adapter_src_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dut_rxm_bar4_cmd_width_adapter_src_endofpacket),      //   input,    width = 1,          .endofpacket
		.sink_valid         (dut_rxm_bar4_cmd_width_adapter_src_valid),            //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                             //  output,  width = 395,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                          //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_multiplexer_171_sdxk4oa cmd_mux (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                    //  output,  width = 395,          .data
		.src_channel         (cmd_mux_src_channel),                                 //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //   input,  width = 395,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                           //   input,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_multiplexer_171_sdxk4oa cmd_mux_001 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                //  output,  width = 395,          .data
		.src_channel         (cmd_mux_001_src_channel),                             //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                              //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src1_data),                                 //   input,  width = 395,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                           //   input,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_multiplexer_171_cckx4ta cmd_mux_002 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                //  output,  width = 395,          .data
		.src_channel         (cmd_mux_002_src_channel),                             //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                              //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src2_data),                                 //   input,  width = 395,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                            //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                            //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                          //   input,    width = 3,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                             //   input,  width = 395,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                       //   input,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_demultiplexer_171_uehjzdy rsp_demux (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                              //   input,    width = 3,          .channel
		.sink_data          (router_002_src_data),                                 //   input,  width = 395,          .data
		.sink_startofpacket (router_002_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                 //  output,  width = 395,          .data
		.src0_channel       (rsp_demux_src0_channel),                              //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_demultiplexer_171_uehjzdy rsp_demux_001 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                              //   input,    width = 3,          .channel
		.sink_data          (router_003_src_data),                                 //   input,  width = 395,          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //  output,  width = 395,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_demultiplexer_171_3kxwkza rsp_demux_002 (
		.clk                (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                              //   input,    width = 3,          .channel
		.sink_data          (router_004_src_data),                                 //   input,  width = 395,          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //  output,  width = 395,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                      //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                            //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                            //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                             //  output,  width = 395,          .data
		.src1_channel       (rsp_demux_002_src1_channel),                          //  output,    width = 3,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_multiplexer_171_wyhqm3q rsp_mux (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                    //  output,  width = 395,          .data
		.src_channel         (rsp_mux_src_channel),                                 //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                              //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_src0_data),                                 //   input,  width = 395,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                            //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                            //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                          //   input,    width = 3,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                             //   input,  width = 395,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                            //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                            //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                          //   input,    width = 3,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                             //   input,  width = 395,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                       //   input,    width = 1,          .endofpacket
	);

	ep_g3x8_avmm256_altera_merlin_multiplexer_171_36d27bi rsp_mux_001 (
		.clk                 (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                //  output,  width = 395,          .data
		.src_channel         (rsp_mux_001_src_channel),                             //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                            //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),                          //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_002_src1_data),                             //   input,  width = 395,          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket)                       //   input,    width = 1,          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (367),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (368),
		.IN_PKT_BURSTWRAP_L            (368),
		.IN_PKT_BURST_SIZE_H           (371),
		.IN_PKT_BURST_SIZE_L           (369),
		.IN_PKT_RESPONSE_STATUS_H      (391),
		.IN_PKT_RESPONSE_STATUS_L      (390),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (373),
		.IN_PKT_BURST_TYPE_L           (372),
		.IN_PKT_ORI_BURST_SIZE_L       (392),
		.IN_PKT_ORI_BURST_SIZE_H       (394),
		.IN_ST_DATA_W                  (395),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dut_rxm_bar4_rsp_width_adapter (
		.clk                  (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                               //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                             //   input,    width = 3,          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                               //  output,    width = 1,          .ready
		.in_data              (rsp_mux_001_src_data),                                //   input,  width = 395,          .data
		.out_endofpacket      (dut_rxm_bar4_rsp_width_adapter_src_endofpacket),      //  output,    width = 1,       src.endofpacket
		.out_data             (dut_rxm_bar4_rsp_width_adapter_src_data),             //  output,  width = 143,          .data
		.out_channel          (dut_rxm_bar4_rsp_width_adapter_src_channel),          //  output,    width = 3,          .channel
		.out_valid            (dut_rxm_bar4_rsp_width_adapter_src_valid),            //  output,    width = 1,          .valid
		.out_ready            (dut_rxm_bar4_rsp_width_adapter_src_ready),            //   input,    width = 1,          .ready
		.out_startofpacket    (dut_rxm_bar4_rsp_width_adapter_src_startofpacket),    //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated),                         
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (367),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (371),
		.OUT_PKT_BURST_SIZE_L          (369),
		.OUT_PKT_RESPONSE_STATUS_H     (391),
		.OUT_PKT_RESPONSE_STATUS_L     (390),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (373),
		.OUT_PKT_BURST_TYPE_L          (372),
		.OUT_PKT_ORI_BURST_SIZE_L      (392),
		.OUT_PKT_ORI_BURST_SIZE_H      (394),
		.OUT_ST_DATA_W                 (395),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dut_rxm_bar4_cmd_width_adapter (
		.clk                  (DUT_coreclkout_hip_clk),                              //   input,    width = 1,       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                              //   input,    width = 3,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                 //   input,  width = 143,          .data
		.out_endofpacket      (dut_rxm_bar4_cmd_width_adapter_src_endofpacket),      //  output,    width = 1,       src.endofpacket
		.out_data             (dut_rxm_bar4_cmd_width_adapter_src_data),             //  output,  width = 395,          .data
		.out_channel          (dut_rxm_bar4_cmd_width_adapter_src_channel),          //  output,    width = 3,          .channel
		.out_valid            (dut_rxm_bar4_cmd_width_adapter_src_valid),            //  output,    width = 1,          .valid
		.out_ready            (dut_rxm_bar4_cmd_width_adapter_src_ready),            //   input,    width = 1,          .ready
		.out_startofpacket    (dut_rxm_bar4_cmd_width_adapter_src_startofpacket),    //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated),                         
	);

	ep_g3x8_avmm256_altera_avalon_st_adapter_171_l5ksb3y #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_0_data      (dma_control_0_rddts_slave_agent_rdata_fifo_src_data),  //   input,  width = 258,     in_0.data
		.in_0_valid     (dma_control_0_rddts_slave_agent_rdata_fifo_src_valid), //   input,    width = 1,         .valid
		.in_0_ready     (dma_control_0_rddts_slave_agent_rdata_fifo_src_ready), //  output,    width = 1,         .ready
		.in_clk_0_clk   (DUT_coreclkout_hip_clk),                               //   input,    width = 1, in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),  //   input,    width = 1, in_rst_0.reset
		.out_0_data     (avalon_st_adapter_out_0_data),                         //  output,  width = 258,    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                        //  output,    width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                        //   input,    width = 1,         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                         //  output,    width = 1,         .error
	);

	ep_g3x8_avmm256_altera_avalon_st_adapter_171_l5ksb3y #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_0_data      (dma_control_0_wrdts_slave_agent_rdata_fifo_src_data),  //   input,  width = 258,     in_0.data
		.in_0_valid     (dma_control_0_wrdts_slave_agent_rdata_fifo_src_valid), //   input,    width = 1,         .valid
		.in_0_ready     (dma_control_0_wrdts_slave_agent_rdata_fifo_src_ready), //  output,    width = 1,         .ready
		.in_clk_0_clk   (DUT_coreclkout_hip_clk),                               //   input,    width = 1, in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),  //   input,    width = 1, in_rst_0.reset
		.out_0_data     (avalon_st_adapter_001_out_0_data),                     //  output,  width = 258,    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                    //  output,    width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                    //   input,    width = 1,         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                     //  output,    width = 1,         .error
	);

	ep_g3x8_avmm256_altera_avalon_st_adapter_171_l5ksb3y #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),       //   input,  width = 258,     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),      //   input,    width = 1,         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),      //  output,    width = 1,         .ready
		.in_clk_0_clk   (DUT_coreclkout_hip_clk),                              //   input,    width = 1, in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, in_rst_0.reset
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //  output,  width = 258,    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //  output,    width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //   input,    width = 1,         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //  output,    width = 1,         .error
	);

endmodule
